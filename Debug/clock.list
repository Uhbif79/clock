
clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004080  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800418c  0800418c  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c8  080042c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080042c8  080042c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c8  080042c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080042d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000070  08004340  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08004340  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1d7  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219d  00000000  00000000  0002d270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  0002f410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00030198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178bf  00000000  00000000  00030e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e219  00000000  00000000  00048707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a9cb  00000000  00000000  00056920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e12eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003be8  00000000  00000000  000e1340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004174 	.word	0x08004174

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004174 	.word	0x08004174

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af02      	add	r7, sp, #8
 8000162:	6078      	str	r0, [r7, #4]
        if(htim->Instance == TIM1) //check if the interrupt comes from TIM1
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	4a33      	ldr	r2, [pc, #204]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800016a:	4293      	cmp	r3, r2
 800016c:	d15f      	bne.n	800022e <HAL_TIM_PeriodElapsedCallback+0xd2>
        {
       snprintf(trans_str, 63, "t-TIME \n");
 800016e:	4a33      	ldr	r2, [pc, #204]	; (800023c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000170:	213f      	movs	r1, #63	; 0x3f
 8000172:	4833      	ldr	r0, [pc, #204]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000174:	f003 fbb0 	bl	80038d8 <sniprintf>
       HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000178:	4831      	ldr	r0, [pc, #196]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800017a:	f7ff ffe7 	bl	800014c <strlen>
 800017e:	4603      	mov	r3, r0
 8000180:	b29a      	uxth	r2, r3
 8000182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000186:	492e      	ldr	r1, [pc, #184]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000188:	482e      	ldr	r0, [pc, #184]	; (8000244 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800018a:	f003 fa08 	bl	800359e <HAL_UART_Transmit>
       snprintf(trans_str, 63, "?-HELP \n");
 800018e:	4a2e      	ldr	r2, [pc, #184]	; (8000248 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000190:	213f      	movs	r1, #63	; 0x3f
 8000192:	482b      	ldr	r0, [pc, #172]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000194:	f003 fba0 	bl	80038d8 <sniprintf>
       HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000198:	4829      	ldr	r0, [pc, #164]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800019a:	f7ff ffd7 	bl	800014c <strlen>
 800019e:	4603      	mov	r3, r0
 80001a0:	b29a      	uxth	r2, r3
 80001a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a6:	4926      	ldr	r1, [pc, #152]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80001aa:	f003 f9f8 	bl	800359e <HAL_UART_Transmit>
       HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80001ae:	2200      	movs	r2, #0
 80001b0:	4926      	ldr	r1, [pc, #152]	; (800024c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80001b2:	4827      	ldr	r0, [pc, #156]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80001b4:	f002 f928 	bl	8002408 <HAL_RTC_GetTime>
       snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80001b8:	4b24      	ldr	r3, [pc, #144]	; (800024c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80001ba:	781b      	ldrb	r3, [r3, #0]
 80001bc:	4619      	mov	r1, r3
 80001be:	4b23      	ldr	r3, [pc, #140]	; (800024c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80001c0:	785b      	ldrb	r3, [r3, #1]
 80001c2:	461a      	mov	r2, r3
 80001c4:	4b21      	ldr	r3, [pc, #132]	; (800024c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80001c6:	789b      	ldrb	r3, [r3, #2]
 80001c8:	9301      	str	r3, [sp, #4]
 80001ca:	9200      	str	r2, [sp, #0]
 80001cc:	460b      	mov	r3, r1
 80001ce:	4a21      	ldr	r2, [pc, #132]	; (8000254 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80001d0:	213f      	movs	r1, #63	; 0x3f
 80001d2:	481b      	ldr	r0, [pc, #108]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001d4:	f003 fb80 	bl	80038d8 <sniprintf>
       HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80001d8:	4819      	ldr	r0, [pc, #100]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001da:	f7ff ffb7 	bl	800014c <strlen>
 80001de:	4603      	mov	r3, r0
 80001e0:	b29a      	uxth	r2, r3
 80001e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e6:	4916      	ldr	r1, [pc, #88]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001e8:	4816      	ldr	r0, [pc, #88]	; (8000244 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80001ea:	f003 f9d8 	bl	800359e <HAL_UART_Transmit>
       HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80001ee:	2200      	movs	r2, #0
 80001f0:	4919      	ldr	r1, [pc, #100]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80001f2:	4817      	ldr	r0, [pc, #92]	; (8000250 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80001f4:	f002 fa96 	bl	8002724 <HAL_RTC_GetDate>
       snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80001fa:	789b      	ldrb	r3, [r3, #2]
 80001fc:	4619      	mov	r1, r3
 80001fe:	4b16      	ldr	r3, [pc, #88]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000200:	785b      	ldrb	r3, [r3, #1]
 8000202:	461a      	mov	r2, r3
 8000204:	4b14      	ldr	r3, [pc, #80]	; (8000258 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000206:	78db      	ldrb	r3, [r3, #3]
 8000208:	9301      	str	r3, [sp, #4]
 800020a:	9200      	str	r2, [sp, #0]
 800020c:	460b      	mov	r3, r1
 800020e:	4a13      	ldr	r2, [pc, #76]	; (800025c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000210:	213f      	movs	r1, #63	; 0x3f
 8000212:	480b      	ldr	r0, [pc, #44]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000214:	f003 fb60 	bl	80038d8 <sniprintf>
       HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000218:	4809      	ldr	r0, [pc, #36]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800021a:	f7ff ff97 	bl	800014c <strlen>
 800021e:	4603      	mov	r3, r0
 8000220:	b29a      	uxth	r2, r3
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	4906      	ldr	r1, [pc, #24]	; (8000240 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000228:	4806      	ldr	r0, [pc, #24]	; (8000244 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800022a:	f003 f9b8 	bl	800359e <HAL_UART_Transmit>

        }
}
 800022e:	bf00      	nop
 8000230:	3708      	adds	r7, #8
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
 8000236:	bf00      	nop
 8000238:	40012c00 	.word	0x40012c00
 800023c:	0800418c 	.word	0x0800418c
 8000240:	20000094 	.word	0x20000094
 8000244:	20000164 	.word	0x20000164
 8000248:	08004198 	.word	0x08004198
 800024c:	2000008c 	.word	0x2000008c
 8000250:	200001a8 	.word	0x200001a8
 8000254:	080041a4 	.word	0x080041a4
 8000258:	20000090 	.word	0x20000090
 800025c:	080041b4 	.word	0x080041b4

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b590      	push	{r4, r7, lr}
 8000262:	b08d      	sub	sp, #52	; 0x34
 8000264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fed1 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 fb7f 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 fca1 	bl	8000bb4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000272:	f000 fbd9 	bl	8000a28 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000276:	f000 fc73 	bl	8000b60 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800027a:	f000 fc1f 	bl	8000abc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_UART_ENABLE_IT(&MYUART, UART_IT_RXNE); // включить прерывания usart'
 800027e:	4b2f      	ldr	r3, [pc, #188]	; (800033c <main+0xdc>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	68da      	ldr	r2, [r3, #12]
 8000284:	4b2d      	ldr	r3, [pc, #180]	; (800033c <main+0xdc>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f042 0220 	orr.w	r2, r2, #32
 800028c:	60da      	str	r2, [r3, #12]
  HAL_TIM_Base_Start_IT(&htim1);
 800028e:	482c      	ldr	r0, [pc, #176]	; (8000340 <main+0xe0>)
 8000290:	f002 fd8e 	bl	8002db0 <HAL_TIM_Base_Start_IT>
  snprintf(trans_str, 63, "t-TIME \n");
 8000294:	4a2b      	ldr	r2, [pc, #172]	; (8000344 <main+0xe4>)
 8000296:	213f      	movs	r1, #63	; 0x3f
 8000298:	482b      	ldr	r0, [pc, #172]	; (8000348 <main+0xe8>)
 800029a:	f003 fb1d 	bl	80038d8 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800029e:	482a      	ldr	r0, [pc, #168]	; (8000348 <main+0xe8>)
 80002a0:	f7ff ff54 	bl	800014c <strlen>
 80002a4:	4603      	mov	r3, r0
 80002a6:	b29a      	uxth	r2, r3
 80002a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ac:	4926      	ldr	r1, [pc, #152]	; (8000348 <main+0xe8>)
 80002ae:	4823      	ldr	r0, [pc, #140]	; (800033c <main+0xdc>)
 80002b0:	f003 f975 	bl	800359e <HAL_UART_Transmit>
  snprintf(trans_str, 63, "?-HELP \n");
 80002b4:	4a25      	ldr	r2, [pc, #148]	; (800034c <main+0xec>)
 80002b6:	213f      	movs	r1, #63	; 0x3f
 80002b8:	4823      	ldr	r0, [pc, #140]	; (8000348 <main+0xe8>)
 80002ba:	f003 fb0d 	bl	80038d8 <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80002be:	4822      	ldr	r0, [pc, #136]	; (8000348 <main+0xe8>)
 80002c0:	f7ff ff44 	bl	800014c <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	491e      	ldr	r1, [pc, #120]	; (8000348 <main+0xe8>)
 80002ce:	481b      	ldr	r0, [pc, #108]	; (800033c <main+0xdc>)
 80002d0:	f003 f965 	bl	800359e <HAL_UART_Transmit>
    /* USER CODE END WHILE */


	     /* USER CODE END WHILE */

	 	          if(uart_available()) // есть ли что-то в приёмном буфере, тогда читаем
 80002d4:	f000 fe32 	bl	8000f3c <uart_available>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d0fa      	beq.n	80002d4 <main+0x74>
	 	                   {
	 	                           char str[SIZE_BF] = {0,};
 80002de:	2300      	movs	r3, #0
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]
 80002f2:	615a      	str	r2, [r3, #20]
 80002f4:	619a      	str	r2, [r3, #24]
	 	                       //    char str1[SIZE_BF] = {0,};
	 	                           uint8_t i = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	                                uint8_t b = 0;
 80002fc:	2300      	movs	r3, #0
 80002fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	                             //   uint8_t temp;
	 	                           while(uart_available())
 8000302:	e015      	b.n	8000330 <main+0xd0>
	 	                           {
	 	                                   str[i++] = uart_read(); // читаем байт
 8000304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000308:	1c5a      	adds	r2, r3, #1
 800030a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800030e:	461c      	mov	r4, r3
 8000310:	f000 fe2c 	bl	8000f6c <uart_read>
 8000314:	4603      	mov	r3, r0
 8000316:	461a      	mov	r2, r3
 8000318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800031c:	4423      	add	r3, r4
 800031e:	f803 2c24 	strb.w	r2, [r3, #-36]

	 	                                   if(i == SIZE_BF - 1)
 8000322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000326:	2b1f      	cmp	r3, #31
 8000328:	d012      	beq.n	8000350 <main+0xf0>
	 	                                   {
	 	                                         //  str[i] = '\0';
	 	                                           break;
	 	                                   }

	 	                                   HAL_Delay(1);
 800032a:	2001      	movs	r0, #1
 800032c:	f000 fed0 	bl	80010d0 <HAL_Delay>
	 	                           while(uart_available())
 8000330:	f000 fe04 	bl	8000f3c <uart_available>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1e4      	bne.n	8000304 <main+0xa4>
 800033a:	e00a      	b.n	8000352 <main+0xf2>
 800033c:	20000164 	.word	0x20000164
 8000340:	200001bc 	.word	0x200001bc
 8000344:	0800418c 	.word	0x0800418c
 8000348:	20000094 	.word	0x20000094
 800034c:	08004198 	.word	0x08004198
	 	                                           break;
 8000350:	bf00      	nop
	 	                          // str[i] = '\0';

	 	                        ///  HAL_UART_Transmit(&MYUART, (uint8_t*)str, strlen(str), 100); // отправляем обратно что получили
	 	                        /// memcpy(str1, str, 32);

	                      b = str[0];
 8000352:	793b      	ldrb	r3, [r7, #4]
 8000354:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	 ////temp = str[1];
	              if(b=='?')
 8000358:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800035c:	2b3f      	cmp	r3, #63	; 0x3f
 800035e:	d16f      	bne.n	8000440 <main+0x1e0>
	              {
	             	  snprintf(trans_str, 63, "Set hour - hxx \n");
 8000360:	4ab0      	ldr	r2, [pc, #704]	; (8000624 <main+0x3c4>)
 8000362:	213f      	movs	r1, #63	; 0x3f
 8000364:	48b0      	ldr	r0, [pc, #704]	; (8000628 <main+0x3c8>)
 8000366:	f003 fab7 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800036a:	48af      	ldr	r0, [pc, #700]	; (8000628 <main+0x3c8>)
 800036c:	f7ff feee 	bl	800014c <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b29a      	uxth	r2, r3
 8000374:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000378:	49ab      	ldr	r1, [pc, #684]	; (8000628 <main+0x3c8>)
 800037a:	48ac      	ldr	r0, [pc, #688]	; (800062c <main+0x3cc>)
 800037c:	f003 f90f 	bl	800359e <HAL_UART_Transmit>
	             	  snprintf(trans_str, 63, "Set min - mxx \n");
 8000380:	4aab      	ldr	r2, [pc, #684]	; (8000630 <main+0x3d0>)
 8000382:	213f      	movs	r1, #63	; 0x3f
 8000384:	48a8      	ldr	r0, [pc, #672]	; (8000628 <main+0x3c8>)
 8000386:	f003 faa7 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800038a:	48a7      	ldr	r0, [pc, #668]	; (8000628 <main+0x3c8>)
 800038c:	f7ff fede 	bl	800014c <strlen>
 8000390:	4603      	mov	r3, r0
 8000392:	b29a      	uxth	r2, r3
 8000394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000398:	49a3      	ldr	r1, [pc, #652]	; (8000628 <main+0x3c8>)
 800039a:	48a4      	ldr	r0, [pc, #656]	; (800062c <main+0x3cc>)
 800039c:	f003 f8ff 	bl	800359e <HAL_UART_Transmit>
	             	  snprintf(trans_str, 63, "Set sec - sxx \n");
 80003a0:	4aa4      	ldr	r2, [pc, #656]	; (8000634 <main+0x3d4>)
 80003a2:	213f      	movs	r1, #63	; 0x3f
 80003a4:	48a0      	ldr	r0, [pc, #640]	; (8000628 <main+0x3c8>)
 80003a6:	f003 fa97 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80003aa:	489f      	ldr	r0, [pc, #636]	; (8000628 <main+0x3c8>)
 80003ac:	f7ff fece 	bl	800014c <strlen>
 80003b0:	4603      	mov	r3, r0
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003b8:	499b      	ldr	r1, [pc, #620]	; (8000628 <main+0x3c8>)
 80003ba:	489c      	ldr	r0, [pc, #624]	; (800062c <main+0x3cc>)
 80003bc:	f003 f8ef 	bl	800359e <HAL_UART_Transmit>
	             	  snprintf(trans_str, 63, "Set date - dxx \n");
 80003c0:	4a9d      	ldr	r2, [pc, #628]	; (8000638 <main+0x3d8>)
 80003c2:	213f      	movs	r1, #63	; 0x3f
 80003c4:	4898      	ldr	r0, [pc, #608]	; (8000628 <main+0x3c8>)
 80003c6:	f003 fa87 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80003ca:	4897      	ldr	r0, [pc, #604]	; (8000628 <main+0x3c8>)
 80003cc:	f7ff febe 	bl	800014c <strlen>
 80003d0:	4603      	mov	r3, r0
 80003d2:	b29a      	uxth	r2, r3
 80003d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d8:	4993      	ldr	r1, [pc, #588]	; (8000628 <main+0x3c8>)
 80003da:	4894      	ldr	r0, [pc, #592]	; (800062c <main+0x3cc>)
 80003dc:	f003 f8df 	bl	800359e <HAL_UART_Transmit>
	                   snprintf(trans_str, 63, "Set month - mxx \n");
 80003e0:	4a96      	ldr	r2, [pc, #600]	; (800063c <main+0x3dc>)
 80003e2:	213f      	movs	r1, #63	; 0x3f
 80003e4:	4890      	ldr	r0, [pc, #576]	; (8000628 <main+0x3c8>)
 80003e6:	f003 fa77 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80003ea:	488f      	ldr	r0, [pc, #572]	; (8000628 <main+0x3c8>)
 80003ec:	f7ff feae 	bl	800014c <strlen>
 80003f0:	4603      	mov	r3, r0
 80003f2:	b29a      	uxth	r2, r3
 80003f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003f8:	498b      	ldr	r1, [pc, #556]	; (8000628 <main+0x3c8>)
 80003fa:	488c      	ldr	r0, [pc, #560]	; (800062c <main+0x3cc>)
 80003fc:	f003 f8cf 	bl	800359e <HAL_UART_Transmit>
	             	  snprintf(trans_str, 63, "Set year - yxx \n");
 8000400:	4a8f      	ldr	r2, [pc, #572]	; (8000640 <main+0x3e0>)
 8000402:	213f      	movs	r1, #63	; 0x3f
 8000404:	4888      	ldr	r0, [pc, #544]	; (8000628 <main+0x3c8>)
 8000406:	f003 fa67 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800040a:	4887      	ldr	r0, [pc, #540]	; (8000628 <main+0x3c8>)
 800040c:	f7ff fe9e 	bl	800014c <strlen>
 8000410:	4603      	mov	r3, r0
 8000412:	b29a      	uxth	r2, r3
 8000414:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000418:	4983      	ldr	r1, [pc, #524]	; (8000628 <main+0x3c8>)
 800041a:	4884      	ldr	r0, [pc, #528]	; (800062c <main+0x3cc>)
 800041c:	f003 f8bf 	bl	800359e <HAL_UART_Transmit>
	             	  snprintf(trans_str, 63, "Vmesto xx chisla 00, 01, ....  \n");
 8000420:	4a88      	ldr	r2, [pc, #544]	; (8000644 <main+0x3e4>)
 8000422:	213f      	movs	r1, #63	; 0x3f
 8000424:	4880      	ldr	r0, [pc, #512]	; (8000628 <main+0x3c8>)
 8000426:	f003 fa57 	bl	80038d8 <sniprintf>
	             	  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800042a:	487f      	ldr	r0, [pc, #508]	; (8000628 <main+0x3c8>)
 800042c:	f7ff fe8e 	bl	800014c <strlen>
 8000430:	4603      	mov	r3, r0
 8000432:	b29a      	uxth	r2, r3
 8000434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000438:	497b      	ldr	r1, [pc, #492]	; (8000628 <main+0x3c8>)
 800043a:	487c      	ldr	r0, [pc, #496]	; (800062c <main+0x3cc>)
 800043c:	f003 f8af 	bl	800359e <HAL_UART_Transmit>

	              }
	              if(b=='t')
 8000440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000444:	2b74      	cmp	r3, #116	; 0x74
 8000446:	d13f      	bne.n	80004c8 <main+0x268>
	              {
	             	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000448:	2200      	movs	r2, #0
 800044a:	497f      	ldr	r1, [pc, #508]	; (8000648 <main+0x3e8>)
 800044c:	487f      	ldr	r0, [pc, #508]	; (800064c <main+0x3ec>)
 800044e:	f001 ffdb 	bl	8002408 <HAL_RTC_GetTime>
	                   snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000452:	4b7d      	ldr	r3, [pc, #500]	; (8000648 <main+0x3e8>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	4b7b      	ldr	r3, [pc, #492]	; (8000648 <main+0x3e8>)
 800045a:	785b      	ldrb	r3, [r3, #1]
 800045c:	461a      	mov	r2, r3
 800045e:	4b7a      	ldr	r3, [pc, #488]	; (8000648 <main+0x3e8>)
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	9301      	str	r3, [sp, #4]
 8000464:	9200      	str	r2, [sp, #0]
 8000466:	460b      	mov	r3, r1
 8000468:	4a79      	ldr	r2, [pc, #484]	; (8000650 <main+0x3f0>)
 800046a:	213f      	movs	r1, #63	; 0x3f
 800046c:	486e      	ldr	r0, [pc, #440]	; (8000628 <main+0x3c8>)
 800046e:	f003 fa33 	bl	80038d8 <sniprintf>
	                   HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000472:	486d      	ldr	r0, [pc, #436]	; (8000628 <main+0x3c8>)
 8000474:	f7ff fe6a 	bl	800014c <strlen>
 8000478:	4603      	mov	r3, r0
 800047a:	b29a      	uxth	r2, r3
 800047c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000480:	4969      	ldr	r1, [pc, #420]	; (8000628 <main+0x3c8>)
 8000482:	486a      	ldr	r0, [pc, #424]	; (800062c <main+0x3cc>)
 8000484:	f003 f88b 	bl	800359e <HAL_UART_Transmit>

	                   HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8000488:	2200      	movs	r2, #0
 800048a:	4972      	ldr	r1, [pc, #456]	; (8000654 <main+0x3f4>)
 800048c:	486f      	ldr	r0, [pc, #444]	; (800064c <main+0x3ec>)
 800048e:	f002 f949 	bl	8002724 <HAL_RTC_GetDate>
	                   snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8000492:	4b70      	ldr	r3, [pc, #448]	; (8000654 <main+0x3f4>)
 8000494:	789b      	ldrb	r3, [r3, #2]
 8000496:	4619      	mov	r1, r3
 8000498:	4b6e      	ldr	r3, [pc, #440]	; (8000654 <main+0x3f4>)
 800049a:	785b      	ldrb	r3, [r3, #1]
 800049c:	461a      	mov	r2, r3
 800049e:	4b6d      	ldr	r3, [pc, #436]	; (8000654 <main+0x3f4>)
 80004a0:	78db      	ldrb	r3, [r3, #3]
 80004a2:	9301      	str	r3, [sp, #4]
 80004a4:	9200      	str	r2, [sp, #0]
 80004a6:	460b      	mov	r3, r1
 80004a8:	4a6b      	ldr	r2, [pc, #428]	; (8000658 <main+0x3f8>)
 80004aa:	213f      	movs	r1, #63	; 0x3f
 80004ac:	485e      	ldr	r0, [pc, #376]	; (8000628 <main+0x3c8>)
 80004ae:	f003 fa13 	bl	80038d8 <sniprintf>
	                   HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80004b2:	485d      	ldr	r0, [pc, #372]	; (8000628 <main+0x3c8>)
 80004b4:	f7ff fe4a 	bl	800014c <strlen>
 80004b8:	4603      	mov	r3, r0
 80004ba:	b29a      	uxth	r2, r3
 80004bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c0:	4959      	ldr	r1, [pc, #356]	; (8000628 <main+0x3c8>)
 80004c2:	485a      	ldr	r0, [pc, #360]	; (800062c <main+0x3cc>)
 80004c4:	f003 f86b 	bl	800359e <HAL_UART_Transmit>
	              }

	             if(b=='h')
 80004c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80004cc:	2b68      	cmp	r3, #104	; 0x68
 80004ce:	d155      	bne.n	800057c <main+0x31c>
	             {
	             	 sTime.Hours =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 80004d0:	797b      	ldrb	r3, [r7, #5]
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	0092      	lsls	r2, r2, #2
 80004dc:	4413      	add	r3, r2
 80004de:	005b      	lsls	r3, r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	79bb      	ldrb	r3, [r7, #6]
 80004e4:	f003 030f 	and.w	r3, r3, #15
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	4413      	add	r3, r2
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b56      	ldr	r3, [pc, #344]	; (8000648 <main+0x3e8>)
 80004f0:	701a      	strb	r2, [r3, #0]
	                  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80004f2:	2200      	movs	r2, #0
 80004f4:	4954      	ldr	r1, [pc, #336]	; (8000648 <main+0x3e8>)
 80004f6:	4855      	ldr	r0, [pc, #340]	; (800064c <main+0x3ec>)
 80004f8:	f001 feee 	bl	80022d8 <HAL_RTC_SetTime>
	                  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80004fc:	2200      	movs	r2, #0
 80004fe:	4952      	ldr	r1, [pc, #328]	; (8000648 <main+0x3e8>)
 8000500:	4852      	ldr	r0, [pc, #328]	; (800064c <main+0x3ec>)
 8000502:	f001 ff81 	bl	8002408 <HAL_RTC_GetTime>
	                  snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000506:	4b50      	ldr	r3, [pc, #320]	; (8000648 <main+0x3e8>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4619      	mov	r1, r3
 800050c:	4b4e      	ldr	r3, [pc, #312]	; (8000648 <main+0x3e8>)
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	461a      	mov	r2, r3
 8000512:	4b4d      	ldr	r3, [pc, #308]	; (8000648 <main+0x3e8>)
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	9301      	str	r3, [sp, #4]
 8000518:	9200      	str	r2, [sp, #0]
 800051a:	460b      	mov	r3, r1
 800051c:	4a4c      	ldr	r2, [pc, #304]	; (8000650 <main+0x3f0>)
 800051e:	213f      	movs	r1, #63	; 0x3f
 8000520:	4841      	ldr	r0, [pc, #260]	; (8000628 <main+0x3c8>)
 8000522:	f003 f9d9 	bl	80038d8 <sniprintf>
	                  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000526:	4840      	ldr	r0, [pc, #256]	; (8000628 <main+0x3c8>)
 8000528:	f7ff fe10 	bl	800014c <strlen>
 800052c:	4603      	mov	r3, r0
 800052e:	b29a      	uxth	r2, r3
 8000530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000534:	493c      	ldr	r1, [pc, #240]	; (8000628 <main+0x3c8>)
 8000536:	483d      	ldr	r0, [pc, #244]	; (800062c <main+0x3cc>)
 8000538:	f003 f831 	bl	800359e <HAL_UART_Transmit>
	                  HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800053c:	2200      	movs	r2, #0
 800053e:	4945      	ldr	r1, [pc, #276]	; (8000654 <main+0x3f4>)
 8000540:	4842      	ldr	r0, [pc, #264]	; (800064c <main+0x3ec>)
 8000542:	f002 f8ef 	bl	8002724 <HAL_RTC_GetDate>
	                  snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8000546:	4b43      	ldr	r3, [pc, #268]	; (8000654 <main+0x3f4>)
 8000548:	789b      	ldrb	r3, [r3, #2]
 800054a:	4619      	mov	r1, r3
 800054c:	4b41      	ldr	r3, [pc, #260]	; (8000654 <main+0x3f4>)
 800054e:	785b      	ldrb	r3, [r3, #1]
 8000550:	461a      	mov	r2, r3
 8000552:	4b40      	ldr	r3, [pc, #256]	; (8000654 <main+0x3f4>)
 8000554:	78db      	ldrb	r3, [r3, #3]
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	9200      	str	r2, [sp, #0]
 800055a:	460b      	mov	r3, r1
 800055c:	4a3e      	ldr	r2, [pc, #248]	; (8000658 <main+0x3f8>)
 800055e:	213f      	movs	r1, #63	; 0x3f
 8000560:	4831      	ldr	r0, [pc, #196]	; (8000628 <main+0x3c8>)
 8000562:	f003 f9b9 	bl	80038d8 <sniprintf>
	                  HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000566:	4830      	ldr	r0, [pc, #192]	; (8000628 <main+0x3c8>)
 8000568:	f7ff fdf0 	bl	800014c <strlen>
 800056c:	4603      	mov	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	492c      	ldr	r1, [pc, #176]	; (8000628 <main+0x3c8>)
 8000576:	482d      	ldr	r0, [pc, #180]	; (800062c <main+0x3cc>)
 8000578:	f003 f811 	bl	800359e <HAL_UART_Transmit>

	              }
	             if(b=='m')
 800057c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000580:	2b6d      	cmp	r3, #109	; 0x6d
 8000582:	d173      	bne.n	800066c <main+0x40c>
	              {
	              sTime.Minutes =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 8000584:	797b      	ldrb	r3, [r7, #5]
 8000586:	f003 030f 	and.w	r3, r3, #15
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	0092      	lsls	r2, r2, #2
 8000590:	4413      	add	r3, r2
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	b2da      	uxtb	r2, r3
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	f003 030f 	and.w	r3, r3, #15
 800059c:	b2db      	uxtb	r3, r3
 800059e:	4413      	add	r3, r2
 80005a0:	b2da      	uxtb	r2, r3
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <main+0x3e8>)
 80005a4:	705a      	strb	r2, [r3, #1]
	              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80005a6:	2200      	movs	r2, #0
 80005a8:	4927      	ldr	r1, [pc, #156]	; (8000648 <main+0x3e8>)
 80005aa:	4828      	ldr	r0, [pc, #160]	; (800064c <main+0x3ec>)
 80005ac:	f001 fe94 	bl	80022d8 <HAL_RTC_SetTime>
	              HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80005b0:	2200      	movs	r2, #0
 80005b2:	4925      	ldr	r1, [pc, #148]	; (8000648 <main+0x3e8>)
 80005b4:	4825      	ldr	r0, [pc, #148]	; (800064c <main+0x3ec>)
 80005b6:	f001 ff27 	bl	8002408 <HAL_RTC_GetTime>
	              snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80005ba:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0x3e8>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	4619      	mov	r1, r3
 80005c0:	4b21      	ldr	r3, [pc, #132]	; (8000648 <main+0x3e8>)
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b20      	ldr	r3, [pc, #128]	; (8000648 <main+0x3e8>)
 80005c8:	789b      	ldrb	r3, [r3, #2]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9200      	str	r2, [sp, #0]
 80005ce:	460b      	mov	r3, r1
 80005d0:	4a1f      	ldr	r2, [pc, #124]	; (8000650 <main+0x3f0>)
 80005d2:	213f      	movs	r1, #63	; 0x3f
 80005d4:	4814      	ldr	r0, [pc, #80]	; (8000628 <main+0x3c8>)
 80005d6:	f003 f97f 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <main+0x3c8>)
 80005dc:	f7ff fdb6 	bl	800014c <strlen>
 80005e0:	4603      	mov	r3, r0
 80005e2:	b29a      	uxth	r2, r3
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	490f      	ldr	r1, [pc, #60]	; (8000628 <main+0x3c8>)
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <main+0x3cc>)
 80005ec:	f002 ffd7 	bl	800359e <HAL_UART_Transmit>
	              HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80005f0:	2200      	movs	r2, #0
 80005f2:	4918      	ldr	r1, [pc, #96]	; (8000654 <main+0x3f4>)
 80005f4:	4815      	ldr	r0, [pc, #84]	; (800064c <main+0x3ec>)
 80005f6:	f002 f895 	bl	8002724 <HAL_RTC_GetDate>
	              snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <main+0x3f4>)
 80005fc:	789b      	ldrb	r3, [r3, #2]
 80005fe:	4619      	mov	r1, r3
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <main+0x3f4>)
 8000602:	785b      	ldrb	r3, [r3, #1]
 8000604:	461a      	mov	r2, r3
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <main+0x3f4>)
 8000608:	78db      	ldrb	r3, [r3, #3]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9200      	str	r2, [sp, #0]
 800060e:	460b      	mov	r3, r1
 8000610:	4a11      	ldr	r2, [pc, #68]	; (8000658 <main+0x3f8>)
 8000612:	213f      	movs	r1, #63	; 0x3f
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x3c8>)
 8000616:	f003 f95f 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <main+0x3c8>)
 800061c:	f7ff fd96 	bl	800014c <strlen>
 8000620:	e01c      	b.n	800065c <main+0x3fc>
 8000622:	bf00      	nop
 8000624:	080041c8 	.word	0x080041c8
 8000628:	20000094 	.word	0x20000094
 800062c:	20000164 	.word	0x20000164
 8000630:	080041dc 	.word	0x080041dc
 8000634:	080041ec 	.word	0x080041ec
 8000638:	080041fc 	.word	0x080041fc
 800063c:	08004210 	.word	0x08004210
 8000640:	08004224 	.word	0x08004224
 8000644:	08004238 	.word	0x08004238
 8000648:	2000008c 	.word	0x2000008c
 800064c:	200001a8 	.word	0x200001a8
 8000650:	080041a4 	.word	0x080041a4
 8000654:	20000090 	.word	0x20000090
 8000658:	080041b4 	.word	0x080041b4
 800065c:	4603      	mov	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000664:	49ad      	ldr	r1, [pc, #692]	; (800091c <main+0x6bc>)
 8000666:	48ae      	ldr	r0, [pc, #696]	; (8000920 <main+0x6c0>)
 8000668:	f002 ff99 	bl	800359e <HAL_UART_Transmit>
	               }
	             if(b=='s')
 800066c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000670:	2b73      	cmp	r3, #115	; 0x73
 8000672:	d155      	bne.n	8000720 <main+0x4c0>
	               {
	              sTime.Seconds =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 8000674:	797b      	ldrb	r3, [r7, #5]
 8000676:	f003 030f 	and.w	r3, r3, #15
 800067a:	b2db      	uxtb	r3, r3
 800067c:	461a      	mov	r2, r3
 800067e:	0092      	lsls	r2, r2, #2
 8000680:	4413      	add	r3, r2
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	f003 030f 	and.w	r3, r3, #15
 800068c:	b2db      	uxtb	r3, r3
 800068e:	4413      	add	r3, r2
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4ba4      	ldr	r3, [pc, #656]	; (8000924 <main+0x6c4>)
 8000694:	709a      	strb	r2, [r3, #2]
	              HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000696:	2200      	movs	r2, #0
 8000698:	49a2      	ldr	r1, [pc, #648]	; (8000924 <main+0x6c4>)
 800069a:	48a3      	ldr	r0, [pc, #652]	; (8000928 <main+0x6c8>)
 800069c:	f001 fe1c 	bl	80022d8 <HAL_RTC_SetTime>
	              HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80006a0:	2200      	movs	r2, #0
 80006a2:	49a0      	ldr	r1, [pc, #640]	; (8000924 <main+0x6c4>)
 80006a4:	48a0      	ldr	r0, [pc, #640]	; (8000928 <main+0x6c8>)
 80006a6:	f001 feaf 	bl	8002408 <HAL_RTC_GetTime>
	              snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80006aa:	4b9e      	ldr	r3, [pc, #632]	; (8000924 <main+0x6c4>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	4619      	mov	r1, r3
 80006b0:	4b9c      	ldr	r3, [pc, #624]	; (8000924 <main+0x6c4>)
 80006b2:	785b      	ldrb	r3, [r3, #1]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b9b      	ldr	r3, [pc, #620]	; (8000924 <main+0x6c4>)
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	9301      	str	r3, [sp, #4]
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	460b      	mov	r3, r1
 80006c0:	4a9a      	ldr	r2, [pc, #616]	; (800092c <main+0x6cc>)
 80006c2:	213f      	movs	r1, #63	; 0x3f
 80006c4:	4895      	ldr	r0, [pc, #596]	; (800091c <main+0x6bc>)
 80006c6:	f003 f907 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80006ca:	4894      	ldr	r0, [pc, #592]	; (800091c <main+0x6bc>)
 80006cc:	f7ff fd3e 	bl	800014c <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d8:	4990      	ldr	r1, [pc, #576]	; (800091c <main+0x6bc>)
 80006da:	4891      	ldr	r0, [pc, #580]	; (8000920 <main+0x6c0>)
 80006dc:	f002 ff5f 	bl	800359e <HAL_UART_Transmit>
	              HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80006e0:	2200      	movs	r2, #0
 80006e2:	4993      	ldr	r1, [pc, #588]	; (8000930 <main+0x6d0>)
 80006e4:	4890      	ldr	r0, [pc, #576]	; (8000928 <main+0x6c8>)
 80006e6:	f002 f81d 	bl	8002724 <HAL_RTC_GetDate>
	              snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 80006ea:	4b91      	ldr	r3, [pc, #580]	; (8000930 <main+0x6d0>)
 80006ec:	789b      	ldrb	r3, [r3, #2]
 80006ee:	4619      	mov	r1, r3
 80006f0:	4b8f      	ldr	r3, [pc, #572]	; (8000930 <main+0x6d0>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b8e      	ldr	r3, [pc, #568]	; (8000930 <main+0x6d0>)
 80006f8:	78db      	ldrb	r3, [r3, #3]
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	9200      	str	r2, [sp, #0]
 80006fe:	460b      	mov	r3, r1
 8000700:	4a8c      	ldr	r2, [pc, #560]	; (8000934 <main+0x6d4>)
 8000702:	213f      	movs	r1, #63	; 0x3f
 8000704:	4885      	ldr	r0, [pc, #532]	; (800091c <main+0x6bc>)
 8000706:	f003 f8e7 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800070a:	4884      	ldr	r0, [pc, #528]	; (800091c <main+0x6bc>)
 800070c:	f7ff fd1e 	bl	800014c <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000718:	4980      	ldr	r1, [pc, #512]	; (800091c <main+0x6bc>)
 800071a:	4881      	ldr	r0, [pc, #516]	; (8000920 <main+0x6c0>)
 800071c:	f002 ff3f 	bl	800359e <HAL_UART_Transmit>
	                                    }
	             if(b=='d')
 8000720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000724:	2b64      	cmp	r3, #100	; 0x64
 8000726:	d155      	bne.n	80007d4 <main+0x574>
	                {
	              DateToUpdate.Date =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 8000728:	797b      	ldrb	r3, [r7, #5]
 800072a:	f003 030f 	and.w	r3, r3, #15
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	0092      	lsls	r2, r2, #2
 8000734:	4413      	add	r3, r2
 8000736:	005b      	lsls	r3, r3, #1
 8000738:	b2da      	uxtb	r2, r3
 800073a:	79bb      	ldrb	r3, [r7, #6]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	b2db      	uxtb	r3, r3
 8000742:	4413      	add	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b7a      	ldr	r3, [pc, #488]	; (8000930 <main+0x6d0>)
 8000748:	709a      	strb	r2, [r3, #2]
	              HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 800074a:	2200      	movs	r2, #0
 800074c:	4978      	ldr	r1, [pc, #480]	; (8000930 <main+0x6d0>)
 800074e:	4876      	ldr	r0, [pc, #472]	; (8000928 <main+0x6c8>)
 8000750:	f001 ff32 	bl	80025b8 <HAL_RTC_SetDate>
	              HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000754:	2200      	movs	r2, #0
 8000756:	4973      	ldr	r1, [pc, #460]	; (8000924 <main+0x6c4>)
 8000758:	4873      	ldr	r0, [pc, #460]	; (8000928 <main+0x6c8>)
 800075a:	f001 fe55 	bl	8002408 <HAL_RTC_GetTime>
	              snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 800075e:	4b71      	ldr	r3, [pc, #452]	; (8000924 <main+0x6c4>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	4b6f      	ldr	r3, [pc, #444]	; (8000924 <main+0x6c4>)
 8000766:	785b      	ldrb	r3, [r3, #1]
 8000768:	461a      	mov	r2, r3
 800076a:	4b6e      	ldr	r3, [pc, #440]	; (8000924 <main+0x6c4>)
 800076c:	789b      	ldrb	r3, [r3, #2]
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	9200      	str	r2, [sp, #0]
 8000772:	460b      	mov	r3, r1
 8000774:	4a6d      	ldr	r2, [pc, #436]	; (800092c <main+0x6cc>)
 8000776:	213f      	movs	r1, #63	; 0x3f
 8000778:	4868      	ldr	r0, [pc, #416]	; (800091c <main+0x6bc>)
 800077a:	f003 f8ad 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 800077e:	4867      	ldr	r0, [pc, #412]	; (800091c <main+0x6bc>)
 8000780:	f7ff fce4 	bl	800014c <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078c:	4963      	ldr	r1, [pc, #396]	; (800091c <main+0x6bc>)
 800078e:	4864      	ldr	r0, [pc, #400]	; (8000920 <main+0x6c0>)
 8000790:	f002 ff05 	bl	800359e <HAL_UART_Transmit>
	              HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8000794:	2200      	movs	r2, #0
 8000796:	4966      	ldr	r1, [pc, #408]	; (8000930 <main+0x6d0>)
 8000798:	4863      	ldr	r0, [pc, #396]	; (8000928 <main+0x6c8>)
 800079a:	f001 ffc3 	bl	8002724 <HAL_RTC_GetDate>
	              snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 800079e:	4b64      	ldr	r3, [pc, #400]	; (8000930 <main+0x6d0>)
 80007a0:	789b      	ldrb	r3, [r3, #2]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4b62      	ldr	r3, [pc, #392]	; (8000930 <main+0x6d0>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4b61      	ldr	r3, [pc, #388]	; (8000930 <main+0x6d0>)
 80007ac:	78db      	ldrb	r3, [r3, #3]
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	460b      	mov	r3, r1
 80007b4:	4a5f      	ldr	r2, [pc, #380]	; (8000934 <main+0x6d4>)
 80007b6:	213f      	movs	r1, #63	; 0x3f
 80007b8:	4858      	ldr	r0, [pc, #352]	; (800091c <main+0x6bc>)
 80007ba:	f003 f88d 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80007be:	4857      	ldr	r0, [pc, #348]	; (800091c <main+0x6bc>)
 80007c0:	f7ff fcc4 	bl	800014c <strlen>
 80007c4:	4603      	mov	r3, r0
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007cc:	4953      	ldr	r1, [pc, #332]	; (800091c <main+0x6bc>)
 80007ce:	4854      	ldr	r0, [pc, #336]	; (8000920 <main+0x6c0>)
 80007d0:	f002 fee5 	bl	800359e <HAL_UART_Transmit>
	                                   }
	             if(b=='f')
 80007d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007d8:	2b66      	cmp	r3, #102	; 0x66
 80007da:	d155      	bne.n	8000888 <main+0x628>
	                {
	              DateToUpdate.Month =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 80007dc:	797b      	ldrb	r3, [r7, #5]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	0092      	lsls	r2, r2, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	4413      	add	r3, r2
 80007f8:	b2da      	uxtb	r2, r3
 80007fa:	4b4d      	ldr	r3, [pc, #308]	; (8000930 <main+0x6d0>)
 80007fc:	705a      	strb	r2, [r3, #1]
	              HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80007fe:	2200      	movs	r2, #0
 8000800:	494b      	ldr	r1, [pc, #300]	; (8000930 <main+0x6d0>)
 8000802:	4849      	ldr	r0, [pc, #292]	; (8000928 <main+0x6c8>)
 8000804:	f001 fed8 	bl	80025b8 <HAL_RTC_SetDate>
	              HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 8000808:	2200      	movs	r2, #0
 800080a:	4946      	ldr	r1, [pc, #280]	; (8000924 <main+0x6c4>)
 800080c:	4846      	ldr	r0, [pc, #280]	; (8000928 <main+0x6c8>)
 800080e:	f001 fdfb 	bl	8002408 <HAL_RTC_GetTime>
	              snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000812:	4b44      	ldr	r3, [pc, #272]	; (8000924 <main+0x6c4>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	4619      	mov	r1, r3
 8000818:	4b42      	ldr	r3, [pc, #264]	; (8000924 <main+0x6c4>)
 800081a:	785b      	ldrb	r3, [r3, #1]
 800081c:	461a      	mov	r2, r3
 800081e:	4b41      	ldr	r3, [pc, #260]	; (8000924 <main+0x6c4>)
 8000820:	789b      	ldrb	r3, [r3, #2]
 8000822:	9301      	str	r3, [sp, #4]
 8000824:	9200      	str	r2, [sp, #0]
 8000826:	460b      	mov	r3, r1
 8000828:	4a40      	ldr	r2, [pc, #256]	; (800092c <main+0x6cc>)
 800082a:	213f      	movs	r1, #63	; 0x3f
 800082c:	483b      	ldr	r0, [pc, #236]	; (800091c <main+0x6bc>)
 800082e:	f003 f853 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000832:	483a      	ldr	r0, [pc, #232]	; (800091c <main+0x6bc>)
 8000834:	f7ff fc8a 	bl	800014c <strlen>
 8000838:	4603      	mov	r3, r0
 800083a:	b29a      	uxth	r2, r3
 800083c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000840:	4936      	ldr	r1, [pc, #216]	; (800091c <main+0x6bc>)
 8000842:	4837      	ldr	r0, [pc, #220]	; (8000920 <main+0x6c0>)
 8000844:	f002 feab 	bl	800359e <HAL_UART_Transmit>
	              HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 8000848:	2200      	movs	r2, #0
 800084a:	4939      	ldr	r1, [pc, #228]	; (8000930 <main+0x6d0>)
 800084c:	4836      	ldr	r0, [pc, #216]	; (8000928 <main+0x6c8>)
 800084e:	f001 ff69 	bl	8002724 <HAL_RTC_GetDate>
	              snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8000852:	4b37      	ldr	r3, [pc, #220]	; (8000930 <main+0x6d0>)
 8000854:	789b      	ldrb	r3, [r3, #2]
 8000856:	4619      	mov	r1, r3
 8000858:	4b35      	ldr	r3, [pc, #212]	; (8000930 <main+0x6d0>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	461a      	mov	r2, r3
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <main+0x6d0>)
 8000860:	78db      	ldrb	r3, [r3, #3]
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	9200      	str	r2, [sp, #0]
 8000866:	460b      	mov	r3, r1
 8000868:	4a32      	ldr	r2, [pc, #200]	; (8000934 <main+0x6d4>)
 800086a:	213f      	movs	r1, #63	; 0x3f
 800086c:	482b      	ldr	r0, [pc, #172]	; (800091c <main+0x6bc>)
 800086e:	f003 f833 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000872:	482a      	ldr	r0, [pc, #168]	; (800091c <main+0x6bc>)
 8000874:	f7ff fc6a 	bl	800014c <strlen>
 8000878:	4603      	mov	r3, r0
 800087a:	b29a      	uxth	r2, r3
 800087c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000880:	4926      	ldr	r1, [pc, #152]	; (800091c <main+0x6bc>)
 8000882:	4827      	ldr	r0, [pc, #156]	; (8000920 <main+0x6c0>)
 8000884:	f002 fe8b 	bl	800359e <HAL_UART_Transmit>
	                                                           }
	             if(b=='y')
 8000888:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800088c:	2b79      	cmp	r3, #121	; 0x79
 800088e:	f47f ad21 	bne.w	80002d4 <main+0x74>
	                 {
	              DateToUpdate.Year =   10*(str[1] & 0x0F) + (str[2] & 0x0F);
 8000892:	797b      	ldrb	r3, [r7, #5]
 8000894:	f003 030f 	and.w	r3, r3, #15
 8000898:	b2db      	uxtb	r3, r3
 800089a:	461a      	mov	r2, r3
 800089c:	0092      	lsls	r2, r2, #2
 800089e:	4413      	add	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	4413      	add	r3, r2
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <main+0x6d0>)
 80008b2:	70da      	strb	r2, [r3, #3]
	              HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80008b4:	2200      	movs	r2, #0
 80008b6:	491e      	ldr	r1, [pc, #120]	; (8000930 <main+0x6d0>)
 80008b8:	481b      	ldr	r0, [pc, #108]	; (8000928 <main+0x6c8>)
 80008ba:	f001 fe7d 	bl	80025b8 <HAL_RTC_SetDate>
	              HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN); // RTC_FORMAT_BIN , RTC_FORMAT_BCD
 80008be:	2200      	movs	r2, #0
 80008c0:	4918      	ldr	r1, [pc, #96]	; (8000924 <main+0x6c4>)
 80008c2:	4819      	ldr	r0, [pc, #100]	; (8000928 <main+0x6c8>)
 80008c4:	f001 fda0 	bl	8002408 <HAL_RTC_GetTime>
	              snprintf(trans_str, 63, "Time %d:%d:%d\n", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80008c8:	4b16      	ldr	r3, [pc, #88]	; (8000924 <main+0x6c4>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <main+0x6c4>)
 80008d0:	785b      	ldrb	r3, [r3, #1]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b13      	ldr	r3, [pc, #76]	; (8000924 <main+0x6c4>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	9200      	str	r2, [sp, #0]
 80008dc:	460b      	mov	r3, r1
 80008de:	4a13      	ldr	r2, [pc, #76]	; (800092c <main+0x6cc>)
 80008e0:	213f      	movs	r1, #63	; 0x3f
 80008e2:	480e      	ldr	r0, [pc, #56]	; (800091c <main+0x6bc>)
 80008e4:	f002 fff8 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <main+0x6bc>)
 80008ea:	f7ff fc2f 	bl	800014c <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008f6:	4909      	ldr	r1, [pc, #36]	; (800091c <main+0x6bc>)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <main+0x6c0>)
 80008fa:	f002 fe50 	bl	800359e <HAL_UART_Transmit>
	              HAL_RTC_GetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN);
 80008fe:	2200      	movs	r2, #0
 8000900:	490b      	ldr	r1, [pc, #44]	; (8000930 <main+0x6d0>)
 8000902:	4809      	ldr	r0, [pc, #36]	; (8000928 <main+0x6c8>)
 8000904:	f001 ff0e 	bl	8002724 <HAL_RTC_GetDate>
	              snprintf(trans_str, 63, "Date %d-%d-20%d\n", DateToUpdate.Date, DateToUpdate.Month, DateToUpdate.Year);
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <main+0x6d0>)
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	4619      	mov	r1, r3
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <main+0x6d0>)
 8000910:	785b      	ldrb	r3, [r3, #1]
 8000912:	461a      	mov	r2, r3
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <main+0x6d0>)
 8000916:	78db      	ldrb	r3, [r3, #3]
 8000918:	e00e      	b.n	8000938 <main+0x6d8>
 800091a:	bf00      	nop
 800091c:	20000094 	.word	0x20000094
 8000920:	20000164 	.word	0x20000164
 8000924:	2000008c 	.word	0x2000008c
 8000928:	200001a8 	.word	0x200001a8
 800092c:	080041a4 	.word	0x080041a4
 8000930:	20000090 	.word	0x20000090
 8000934:	080041b4 	.word	0x080041b4
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	9200      	str	r2, [sp, #0]
 800093c:	460b      	mov	r3, r1
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <main+0x700>)
 8000940:	213f      	movs	r1, #63	; 0x3f
 8000942:	4808      	ldr	r0, [pc, #32]	; (8000964 <main+0x704>)
 8000944:	f002 ffc8 	bl	80038d8 <sniprintf>
	              HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);
 8000948:	4806      	ldr	r0, [pc, #24]	; (8000964 <main+0x704>)
 800094a:	f7ff fbff 	bl	800014c <strlen>
 800094e:	4603      	mov	r3, r0
 8000950:	b29a      	uxth	r2, r3
 8000952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000956:	4903      	ldr	r1, [pc, #12]	; (8000964 <main+0x704>)
 8000958:	4803      	ldr	r0, [pc, #12]	; (8000968 <main+0x708>)
 800095a:	f002 fe20 	bl	800359e <HAL_UART_Transmit>
	 	          if(uart_available()) // есть ли что-то в приёмном буфере, тогда читаем
 800095e:	e4b9      	b.n	80002d4 <main+0x74>
 8000960:	080041b4 	.word	0x080041b4
 8000964:	20000094 	.word	0x20000094
 8000968:	20000164 	.word	0x20000164

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000976:	2228      	movs	r2, #40	; 0x28
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f002 ffa4 	bl	80038c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800099c:	2305      	movs	r3, #5
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009aa:	2301      	movs	r3, #1
 80009ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ae:	2301      	movs	r3, #1
 80009b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
 80009bc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80009c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe5c 	bl	8001684 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009d2:	f000 f93b 	bl	8000c4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	2101      	movs	r1, #1
 80009f2:	4618      	mov	r0, r3
 80009f4:	f001 f8c6 	bl	8001b84 <HAL_RCC_ClockConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009fe:	f000 f925 	bl	8000c4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a02:	2301      	movs	r3, #1
 8000a04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000a06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fa52 	bl	8001eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a1a:	f000 f917 	bl	8000c4c <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3750      	adds	r7, #80	; 0x50
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2100      	movs	r1, #0
 8000a32:	460a      	mov	r2, r1
 8000a34:	801a      	strh	r2, [r3, #0]
 8000a36:	460a      	mov	r2, r1
 8000a38:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <MX_RTC_Init+0x90>)
 8000a42:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a46:	f04f 32ff 	mov.w	r2, #4294967295
 8000a4a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000a4c:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a52:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a54:	4817      	ldr	r0, [pc, #92]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a56:	f001 fba9 	bl	80021ac <HAL_RTC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000a60:	f000 f8f4 	bl	8000c4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 10;
 8000a64:	230a      	movs	r3, #10
 8000a66:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 10;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	4619      	mov	r1, r3
 8000a76:	480f      	ldr	r0, [pc, #60]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a78:	f001 fc2e 	bl	80022d8 <HAL_RTC_SetTime>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000a82:	f000 f8e3 	bl	8000c4c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a86:	2301      	movs	r3, #1
 8000a88:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_MAY;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 8;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 22;
 8000a92:	2316      	movs	r3, #22
 8000a94:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_RTC_Init+0x8c>)
 8000a9e:	f001 fd8b 	bl	80025b8 <HAL_RTC_SetDate>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000aa8:	f000 f8d0 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001a8 	.word	0x200001a8
 8000ab8:	40002800 	.word	0x40002800

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000ada:	4a20      	ldr	r2, [pc, #128]	; (8000b5c <MX_TIM1_Init+0xa0>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39999;
 8000ade:	4b1e      	ldr	r3, [pc, #120]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000ae0:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000ae4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000aee:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000af2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b06:	4814      	ldr	r0, [pc, #80]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000b08:	f002 f902 	bl	8002d10 <HAL_TIM_Base_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000b12:	f000 f89b 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1c:	f107 0308 	add.w	r3, r7, #8
 8000b20:	4619      	mov	r1, r3
 8000b22:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000b24:	f002 fa9e 	bl	8003064 <HAL_TIM_ConfigClockSource>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000b2e:	f000 f88d 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <MX_TIM1_Init+0x9c>)
 8000b40:	f002 fc70 	bl	8003424 <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b4a:	f000 f87f 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	200001bc 	.word	0x200001bc
 8000b5c:	40012c00 	.word	0x40012c00

08000b60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b66:	4a12      	ldr	r2, [pc, #72]	; (8000bb0 <MX_USART1_UART_Init+0x50>)
 8000b68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b86:	220c      	movs	r2, #12
 8000b88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART1_UART_Init+0x4c>)
 8000b98:	f002 fcb4 	bl	8003504 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ba2:	f000 f853 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000164 	.word	0x20000164
 8000bb0:	40013800 	.word	0x40013800

08000bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b088      	sub	sp, #32
 8000bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bba:	f107 0310 	add.w	r3, r7, #16
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
 8000bc2:	605a      	str	r2, [r3, #4]
 8000bc4:	609a      	str	r2, [r3, #8]
 8000bc6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a17      	ldr	r2, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000be6:	f043 0320 	orr.w	r3, r3, #32
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0320 	and.w	r3, r3, #32
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_GPIO_Init+0x90>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c16:	480c      	ldr	r0, [pc, #48]	; (8000c48 <MX_GPIO_Init+0x94>)
 8000c18:	f000 fd10 	bl	800163c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 0310 	add.w	r3, r7, #16
 8000c32:	4619      	mov	r1, r3
 8000c34:	4804      	ldr	r0, [pc, #16]	; (8000c48 <MX_GPIO_Init+0x94>)
 8000c36:	f000 fb7d 	bl	8001334 <HAL_GPIO_Init>

}
 8000c3a:	bf00      	nop
 8000c3c:	3720      	adds	r7, #32
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40021000 	.word	0x40021000
 8000c48:	40011000 	.word	0x40011000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6193      	str	r3, [r2, #24]
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c6c:	699b      	ldr	r3, [r3, #24]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c80:	61d3      	str	r3, [r2, #28]
 8000c82:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <HAL_MspInit+0x5c>)
 8000c84:	69db      	ldr	r3, [r3, #28]
 8000c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_MspInit+0x60>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_MspInit+0x60>)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3714      	adds	r7, #20
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40010000 	.word	0x40010000

08000cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b084      	sub	sp, #16
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0b      	ldr	r2, [pc, #44]	; (8000cf8 <HAL_RTC_MspInit+0x3c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d110      	bne.n	8000cf0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000cce:	f000 fccd 	bl	800166c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_RTC_MspInit+0x40>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_RTC_MspInit+0x40>)
 8000cd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000cdc:	61d3      	str	r3, [r2, #28]
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_RTC_MspInit+0x40>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cea:	4b05      	ldr	r3, [pc, #20]	; (8000d00 <HAL_RTC_MspInit+0x44>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40002800 	.word	0x40002800
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	4242043c 	.word	0x4242043c

08000d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	; (8000d48 <HAL_TIM_Base_MspInit+0x44>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d113      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d20:	6193      	str	r3, [r2, #24]
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x48>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2019      	movs	r0, #25
 8000d34:	f000 fac7 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d38:	2019      	movs	r0, #25
 8000d3a:	f000 fae0 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a20      	ldr	r2, [pc, #128]	; (8000dec <HAL_UART_MspInit+0x9c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d139      	bne.n	8000de4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a1e      	ldr	r2, [pc, #120]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d8e:	f043 0304 	orr.w	r3, r3, #4
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_UART_MspInit+0xa0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0304 	and.w	r3, r3, #4
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000da0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000da4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0310 	add.w	r3, r7, #16
 8000db2:	4619      	mov	r1, r3
 8000db4:	480f      	ldr	r0, [pc, #60]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000db6:	f000 fabd 	bl	8001334 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_UART_MspInit+0xa4>)
 8000dd0:	f000 fab0 	bl	8001334 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2025      	movs	r0, #37	; 0x25
 8000dda:	f000 fa74 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dde:	2025      	movs	r0, #37	; 0x25
 8000de0:	f000 fa8d 	bl	80012fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40013800 	.word	0x40013800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010800 	.word	0x40010800

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e2e:	b480      	push	{r7}
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bc80      	pop	{r7}
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f92b 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e4c:	4802      	ldr	r0, [pc, #8]	; (8000e58 <TIM1_UP_IRQHandler+0x10>)
 8000e4e:	f002 f801 	bl	8002e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200001bc 	.word	0x200001bc

08000e5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	        if((MYUART.Instance->SR & USART_SR_RXNE) != RESET)
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <USART1_IRQHandler+0x58>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d01b      	beq.n	8000ea8 <USART1_IRQHandler+0x4c>
	        {
	                uint8_t rbyte = (uint8_t)(MYUART.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8000e70:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <USART1_IRQHandler+0x58>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	71fb      	strb	r3, [r7, #7]
	                uint16_t i = (uint16_t)(rx_buffer_head + 1) % UART_RX_BUFFER_SIZE;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <USART1_IRQHandler+0x5c>)
 8000e7a:	881b      	ldrh	r3, [r3, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e86:	80bb      	strh	r3, [r7, #4]

	                if(i != rx_buffer_tail)
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <USART1_IRQHandler+0x60>)
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	88ba      	ldrh	r2, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d009      	beq.n	8000ea8 <USART1_IRQHandler+0x4c>
	                {
	                        rx_buffer[rx_buffer_head] = rbyte;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <USART1_IRQHandler+0x5c>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <USART1_IRQHandler+0x64>)
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	5453      	strb	r3, [r2, r1]
	                        rx_buffer_head = i;
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <USART1_IRQHandler+0x5c>)
 8000ea4:	88bb      	ldrh	r3, [r7, #4]
 8000ea6:	8013      	strh	r3, [r2, #0]
	                }
	        }

	        return;
 8000ea8:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000164 	.word	0x20000164
 8000eb8:	200000d8 	.word	0x200000d8
 8000ebc:	200000da 	.word	0x200000da
 8000ec0:	200000dc 	.word	0x200000dc

08000ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ecc:	4a14      	ldr	r2, [pc, #80]	; (8000f20 <_sbrk+0x5c>)
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <_sbrk+0x60>)
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <_sbrk+0x64>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d102      	bne.n	8000ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <_sbrk+0x64>)
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <_sbrk+0x68>)
 8000ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	d207      	bcs.n	8000f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef4:	f002 fcbe 	bl	8003874 <__errno>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	220c      	movs	r2, #12
 8000efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	e009      	b.n	8000f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0a:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	4a05      	ldr	r2, [pc, #20]	; (8000f28 <_sbrk+0x64>)
 8000f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f16:	68fb      	ldr	r3, [r7, #12]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3718      	adds	r7, #24
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20005000 	.word	0x20005000
 8000f24:	00000400 	.word	0x00000400
 8000f28:	200000d4 	.word	0x200000d4
 8000f2c:	20000218 	.word	0x20000218

08000f30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <uart_available>:
	rx_buffer_tail = 0;
	__HAL_UART_ENABLE_IT(&MYUART, UART_IT_RXNE);
}

uint16_t uart_available(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
	return ((uint16_t)(UART_RX_BUFFER_SIZE + rx_buffer_head - rx_buffer_tail)) % UART_RX_BUFFER_SIZE;
 8000f40:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <uart_available+0x28>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <uart_available+0x2c>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3380      	adds	r3, #128	; 0x80
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f58:	b29b      	uxth	r3, r3
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200000d8 	.word	0x200000d8
 8000f68:	200000da 	.word	0x200000da

08000f6c <uart_read>:

uint8_t uart_read(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
	if(rx_buffer_head == rx_buffer_tail)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <uart_read+0x48>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	b29a      	uxth	r2, r3
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <uart_read+0x4c>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d101      	bne.n	8000f86 <uart_read+0x1a>
	{
		return 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e011      	b.n	8000faa <uart_read+0x3e>
	}
	else
	{
		uint8_t c = rx_buffer[rx_buffer_tail];
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <uart_read+0x4c>)
 8000f88:	881b      	ldrh	r3, [r3, #0]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <uart_read+0x50>)
 8000f90:	5c9b      	ldrb	r3, [r3, r2]
 8000f92:	71fb      	strb	r3, [r7, #7]
		rx_buffer_tail = (uint16_t)(rx_buffer_tail + 1) % UART_RX_BUFFER_SIZE;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <uart_read+0x4c>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa2:	b29a      	uxth	r2, r3
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <uart_read+0x4c>)
 8000fa6:	801a      	strh	r2, [r3, #0]
		return c;
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
	}
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	200000d8 	.word	0x200000d8
 8000fb8:	200000da 	.word	0x200000da
 8000fbc:	200000dc 	.word	0x200000dc

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fe6:	f7ff ffa3 	bl	8000f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f002 fc49 	bl	8003880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff f937 	bl	8000260 <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ffc:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 8001000:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001004:	20000218 	.word	0x20000218

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x28>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x28>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f947 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe16 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f95f 	bl	800131a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 f927 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a03      	ldr	r2, [pc, #12]	; (80010b8 <HAL_IncTick+0x20>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	20000008 	.word	0x20000008
 80010b8:	20000204 	.word	0x20000204

080010bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	; (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000204 	.word	0x20000204

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffe0 	bl	80010bc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4906      	ldr	r1, [pc, #24]	; (80011b0 <__NVIC_EnableIRQ+0x34>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	; (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	; (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	; 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	; 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff2d 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff42 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff35 	bl	800117c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001334:	b480      	push	{r7}
 8001336:	b08b      	sub	sp, #44	; 0x2c
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001342:	2300      	movs	r3, #0
 8001344:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001346:	e169      	b.n	800161c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001348:	2201      	movs	r2, #1
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	69fa      	ldr	r2, [r7, #28]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	429a      	cmp	r2, r3
 8001362:	f040 8158 	bne.w	8001616 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a9a      	ldr	r2, [pc, #616]	; (80015d4 <HAL_GPIO_Init+0x2a0>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d05e      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001370:	4a98      	ldr	r2, [pc, #608]	; (80015d4 <HAL_GPIO_Init+0x2a0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d875      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001376:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <HAL_GPIO_Init+0x2a4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d058      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 800137c:	4a96      	ldr	r2, [pc, #600]	; (80015d8 <HAL_GPIO_Init+0x2a4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d86f      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 8001382:	4a96      	ldr	r2, [pc, #600]	; (80015dc <HAL_GPIO_Init+0x2a8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d052      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001388:	4a94      	ldr	r2, [pc, #592]	; (80015dc <HAL_GPIO_Init+0x2a8>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d869      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800138e:	4a94      	ldr	r2, [pc, #592]	; (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d04c      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 8001394:	4a92      	ldr	r2, [pc, #584]	; (80015e0 <HAL_GPIO_Init+0x2ac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d863      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 800139a:	4a92      	ldr	r2, [pc, #584]	; (80015e4 <HAL_GPIO_Init+0x2b0>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d046      	beq.n	800142e <HAL_GPIO_Init+0xfa>
 80013a0:	4a90      	ldr	r2, [pc, #576]	; (80015e4 <HAL_GPIO_Init+0x2b0>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d85d      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013a6:	2b12      	cmp	r3, #18
 80013a8:	d82a      	bhi.n	8001400 <HAL_GPIO_Init+0xcc>
 80013aa:	2b12      	cmp	r3, #18
 80013ac:	d859      	bhi.n	8001462 <HAL_GPIO_Init+0x12e>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <HAL_GPIO_Init+0x80>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	0800142f 	.word	0x0800142f
 80013b8:	08001409 	.word	0x08001409
 80013bc:	0800141b 	.word	0x0800141b
 80013c0:	0800145d 	.word	0x0800145d
 80013c4:	08001463 	.word	0x08001463
 80013c8:	08001463 	.word	0x08001463
 80013cc:	08001463 	.word	0x08001463
 80013d0:	08001463 	.word	0x08001463
 80013d4:	08001463 	.word	0x08001463
 80013d8:	08001463 	.word	0x08001463
 80013dc:	08001463 	.word	0x08001463
 80013e0:	08001463 	.word	0x08001463
 80013e4:	08001463 	.word	0x08001463
 80013e8:	08001463 	.word	0x08001463
 80013ec:	08001463 	.word	0x08001463
 80013f0:	08001463 	.word	0x08001463
 80013f4:	08001463 	.word	0x08001463
 80013f8:	08001411 	.word	0x08001411
 80013fc:	08001425 	.word	0x08001425
 8001400:	4a79      	ldr	r2, [pc, #484]	; (80015e8 <HAL_GPIO_Init+0x2b4>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d013      	beq.n	800142e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e02c      	b.n	8001462 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e029      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	3304      	adds	r3, #4
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e024      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	3308      	adds	r3, #8
 8001420:	623b      	str	r3, [r7, #32]
          break;
 8001422:	e01f      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	330c      	adds	r3, #12
 800142a:	623b      	str	r3, [r7, #32]
          break;
 800142c:	e01a      	b.n	8001464 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001436:	2304      	movs	r3, #4
 8001438:	623b      	str	r3, [r7, #32]
          break;
 800143a:	e013      	b.n	8001464 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d105      	bne.n	8001450 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	611a      	str	r2, [r3, #16]
          break;
 800144e:	e009      	b.n	8001464 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001450:	2308      	movs	r3, #8
 8001452:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69fa      	ldr	r2, [r7, #28]
 8001458:	615a      	str	r2, [r3, #20]
          break;
 800145a:	e003      	b.n	8001464 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
          break;
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x130>
          break;
 8001462:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	2bff      	cmp	r3, #255	; 0xff
 8001468:	d801      	bhi.n	800146e <HAL_GPIO_Init+0x13a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_Init+0x13e>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2bff      	cmp	r3, #255	; 0xff
 8001478:	d802      	bhi.n	8001480 <HAL_GPIO_Init+0x14c>
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x152>
 8001480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001482:	3b08      	subs	r3, #8
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	210f      	movs	r1, #15
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	6a39      	ldr	r1, [r7, #32]
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	431a      	orrs	r2, r3
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80b1 	beq.w	8001616 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014b4:	4b4d      	ldr	r3, [pc, #308]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a4c      	ldr	r2, [pc, #304]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b4a      	ldr	r3, [pc, #296]	; (80015ec <HAL_GPIO_Init+0x2b8>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014cc:	4a48      	ldr	r2, [pc, #288]	; (80015f0 <HAL_GPIO_Init+0x2bc>)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	3302      	adds	r3, #2
 80014d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	220f      	movs	r2, #15
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	43db      	mvns	r3, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a40      	ldr	r2, [pc, #256]	; (80015f4 <HAL_GPIO_Init+0x2c0>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d013      	beq.n	8001520 <HAL_GPIO_Init+0x1ec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a3f      	ldr	r2, [pc, #252]	; (80015f8 <HAL_GPIO_Init+0x2c4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d00d      	beq.n	800151c <HAL_GPIO_Init+0x1e8>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a3e      	ldr	r2, [pc, #248]	; (80015fc <HAL_GPIO_Init+0x2c8>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d007      	beq.n	8001518 <HAL_GPIO_Init+0x1e4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a3d      	ldr	r2, [pc, #244]	; (8001600 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_GPIO_Init+0x1e0>
 8001510:	2303      	movs	r3, #3
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001514:	2304      	movs	r3, #4
 8001516:	e004      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001518:	2302      	movs	r3, #2
 800151a:	e002      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 800151c:	2301      	movs	r3, #1
 800151e:	e000      	b.n	8001522 <HAL_GPIO_Init+0x1ee>
 8001520:	2300      	movs	r3, #0
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	f002 0203 	and.w	r2, r2, #3
 8001528:	0092      	lsls	r2, r2, #2
 800152a:	4093      	lsls	r3, r2
 800152c:	68fa      	ldr	r2, [r7, #12]
 800152e:	4313      	orrs	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001532:	492f      	ldr	r1, [pc, #188]	; (80015f0 <HAL_GPIO_Init+0x2bc>)
 8001534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d006      	beq.n	800155a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	492c      	ldr	r1, [pc, #176]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4313      	orrs	r3, r2
 8001556:	600b      	str	r3, [r1, #0]
 8001558:	e006      	b.n	8001568 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	43db      	mvns	r3, r3
 8001562:	4928      	ldr	r1, [pc, #160]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001564:	4013      	ands	r3, r2
 8001566:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4922      	ldr	r1, [pc, #136]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	491e      	ldr	r1, [pc, #120]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	4918      	ldr	r1, [pc, #96]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015aa:	4b16      	ldr	r3, [pc, #88]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4914      	ldr	r1, [pc, #80]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d021      	beq.n	8001608 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	490e      	ldr	r1, [pc, #56]	; (8001604 <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60cb      	str	r3, [r1, #12]
 80015d0:	e021      	b.n	8001616 <HAL_GPIO_Init+0x2e2>
 80015d2:	bf00      	nop
 80015d4:	10320000 	.word	0x10320000
 80015d8:	10310000 	.word	0x10310000
 80015dc:	10220000 	.word	0x10220000
 80015e0:	10210000 	.word	0x10210000
 80015e4:	10120000 	.word	0x10120000
 80015e8:	10110000 	.word	0x10110000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40010000 	.word	0x40010000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40011000 	.word	0x40011000
 8001600:	40011400 	.word	0x40011400
 8001604:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001608:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <HAL_GPIO_Init+0x304>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4909      	ldr	r1, [pc, #36]	; (8001638 <HAL_GPIO_Init+0x304>)
 8001612:	4013      	ands	r3, r2
 8001614:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae8e 	bne.w	8001348 <HAL_GPIO_Init+0x14>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	372c      	adds	r7, #44	; 0x2c
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40010400 	.word	0x40010400

0800163c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	807b      	strh	r3, [r7, #2]
 8001648:	4613      	mov	r3, r2
 800164a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800164c:	787b      	ldrb	r3, [r7, #1]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001658:	e003      	b.n	8001662 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	041a      	lsls	r2, r3, #16
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	611a      	str	r2, [r3, #16]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001670:	4b03      	ldr	r3, [pc, #12]	; (8001680 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	420e0020 	.word	0x420e0020

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e26c      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e246      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fcac 	bl	80010bc <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fca8 	bl	80010bc <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1fa      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fc98 	bl	80010bc <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fc94 	bl	80010bc <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1e6      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1ba      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fc4d 	bl	80010bc <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fc49 	bl	80010bc <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e19b      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc2c 	bl	80010bc <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fc28 	bl	80010bc <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e17a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc0c 	bl	80010bc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc08 	bl	80010bc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e15a      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 fad8 	bl	8001e7c <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fbf2 	bl	80010bc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fbee 	bl	80010bc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e140      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b9e      	ldr	r3, [pc, #632]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b97      	ldr	r3, [pc, #604]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b94      	ldr	r3, [pc, #592]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a93      	ldr	r2, [pc, #588]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b8e      	ldr	r3, [pc, #568]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b8b      	ldr	r3, [pc, #556]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8a      	ldr	r2, [pc, #552]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fbaf 	bl	80010bc <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fbab 	bl	80010bc <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0fd      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <HAL_RCC_OscConfig+0x4f8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a75      	ldr	r2, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b73      	ldr	r3, [pc, #460]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a72      	ldr	r2, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b6d      	ldr	r3, [pc, #436]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a6c      	ldr	r2, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a69      	ldr	r2, [pc, #420]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b67      	ldr	r3, [pc, #412]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a66      	ldr	r2, [pc, #408]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b64      	ldr	r3, [pc, #400]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a63      	ldr	r2, [pc, #396]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb5f 	bl	80010bc <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fb5b 	bl	80010bc <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0ab      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b57      	ldr	r3, [pc, #348]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb49 	bl	80010bc <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb45 	bl	80010bc <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e095      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b48      	ldr	r3, [pc, #288]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a47      	ldr	r2, [pc, #284]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8081 	beq.w	8001b6e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b42      	ldr	r3, [pc, #264]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b3f      	ldr	r3, [pc, #252]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb19 	bl	80010bc <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb15 	bl	80010bc <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e067      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b35      	ldr	r3, [pc, #212]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	492d      	ldr	r1, [pc, #180]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b2b      	ldr	r3, [pc, #172]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b27      	ldr	r3, [pc, #156]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fae9 	bl	80010bc <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fae5 	bl	80010bc <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e037      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e02f      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b1c      	ldr	r3, [pc, #112]	; (8001b80 <HAL_RCC_OscConfig+0x4fc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff fad2 	bl	80010bc <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff face 	bl	80010bc <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e020      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e018      	b.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b48:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d001      	beq.n	8001b6e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40007000 	.word	0x40007000
 8001b80:	42420060 	.word	0x42420060

08001b84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e0d0      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b98:	4b6a      	ldr	r3, [pc, #424]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0307 	and.w	r3, r3, #7
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d910      	bls.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b67      	ldr	r3, [pc, #412]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 0207 	bic.w	r2, r3, #7
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b63      	ldr	r3, [pc, #396]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0b8      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d020      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be0:	4b59      	ldr	r3, [pc, #356]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	4a58      	ldr	r2, [pc, #352]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bf8:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c04:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	494d      	ldr	r1, [pc, #308]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d107      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d115      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e07f      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e073      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c52:	4b3d      	ldr	r3, [pc, #244]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e06b      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c62:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f023 0203 	bic.w	r2, r3, #3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4936      	ldr	r1, [pc, #216]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c74:	f7ff fa22 	bl	80010bc <HAL_GetTick>
 8001c78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7a:	e00a      	b.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7c:	f7ff fa1e 	bl	80010bc <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e053      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	4b2d      	ldr	r3, [pc, #180]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 020c 	and.w	r2, r3, #12
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1eb      	bne.n	8001c7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca4:	4b27      	ldr	r3, [pc, #156]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d210      	bcs.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb2:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 0207 	bic.w	r2, r3, #7
 8001cba:	4922      	ldr	r1, [pc, #136]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d001      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e032      	b.n	8001d3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d008      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4916      	ldr	r1, [pc, #88]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d009      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d12:	f000 f821 	bl	8001d58 <HAL_RCC_GetSysClockFreq>
 8001d16:	4602      	mov	r2, r0
 8001d18:	4b0b      	ldr	r3, [pc, #44]	; (8001d48 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 030f 	and.w	r3, r3, #15
 8001d22:	490a      	ldr	r1, [pc, #40]	; (8001d4c <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	5ccb      	ldrb	r3, [r1, r3]
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a09      	ldr	r2, [pc, #36]	; (8001d50 <HAL_RCC_ClockConfig+0x1cc>)
 8001d2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d2e:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1d0>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f980 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40022000 	.word	0x40022000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	0800427c 	.word	0x0800427c
 8001d50:	20000000 	.word	0x20000000
 8001d54:	20000004 	.word	0x20000004

08001d58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d58:	b490      	push	{r4, r7}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d5e:	4b2a      	ldr	r3, [pc, #168]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d60:	1d3c      	adds	r4, r7, #4
 8001d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d68:	f240 2301 	movw	r3, #513	; 0x201
 8001d6c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	2300      	movs	r3, #0
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d82:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d002      	beq.n	8001d98 <HAL_RCC_GetSysClockFreq+0x40>
 8001d92:	2b08      	cmp	r3, #8
 8001d94:	d003      	beq.n	8001d9e <HAL_RCC_GetSysClockFreq+0x46>
 8001d96:	e02d      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	e02d      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	0c9b      	lsrs	r3, r3, #18
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001daa:	4413      	add	r3, r2
 8001dac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c5b      	lsrs	r3, r3, #17
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dca:	4413      	add	r3, r2
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd6:	fb02 f203 	mul.w	r2, r2, r3
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0800425c 	.word	0x0800425c
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	; (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000000 	.word	0x20000000

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	; (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	0800428c 	.word	0x0800428c

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	; (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	0800428c 	.word	0x0800428c

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d07d      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10d      	bne.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee4:	4b4c      	ldr	r3, [pc, #304]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a4b      	ldr	r2, [pc, #300]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
 8001ef0:	4b49      	ldr	r3, [pc, #292]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efc:	2301      	movs	r3, #1
 8001efe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d118      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a42      	ldr	r2, [pc, #264]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f18:	f7ff f8d0 	bl	80010bc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1e:	e008      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7ff f8cc 	bl	80010bc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e06d      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b3a      	ldr	r3, [pc, #232]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d02e      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d027      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5e:	6a1b      	ldr	r3, [r3, #32]
 8001f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f66:	4b2e      	ldr	r3, [pc, #184]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f72:	4a29      	ldr	r2, [pc, #164]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d014      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff f89b 	bl	80010bc <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7ff f897 	bl	80010bc <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e036      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0ee      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fac:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4917      	ldr	r1, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fbe:	7dfb      	ldrb	r3, [r7, #23]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	490b      	ldr	r1, [pc, #44]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	4904      	ldr	r1, [pc, #16]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40021000 	.word	0x40021000
 800201c:	40007000 	.word	0x40007000
 8002020:	42420440 	.word	0x42420440

08002024 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b08d      	sub	sp, #52	; 0x34
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800202c:	4b5a      	ldr	r3, [pc, #360]	; (8002198 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800202e:	f107 040c 	add.w	r4, r7, #12
 8002032:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002034:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002038:	f240 2301 	movw	r3, #513	; 0x201
 800203c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	2300      	movs	r3, #0
 8002044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002046:	2300      	movs	r3, #0
 8002048:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b10      	cmp	r3, #16
 8002056:	d00a      	beq.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b10      	cmp	r3, #16
 800205c:	f200 8091 	bhi.w	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d04c      	beq.n	8002100 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d07c      	beq.n	8002166 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800206c:	e089      	b.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 800206e:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002074:	4b49      	ldr	r3, [pc, #292]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8082 	beq.w	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	0c9b      	lsrs	r3, r3, #18
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800208e:	4413      	add	r3, r2
 8002090:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002094:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d018      	beq.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c5b      	lsrs	r3, r3, #17
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80020ae:	4413      	add	r3, r2
 80020b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020c0:	4a37      	ldr	r2, [pc, #220]	; (80021a0 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80020c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	fb02 f303 	mul.w	r3, r2, r3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d0:	e004      	b.n	80020dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4a33      	ldr	r2, [pc, #204]	; (80021a4 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 80020d6:	fb02 f303 	mul.w	r3, r2, r3
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020dc:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d102      	bne.n	80020f0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80020ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020ee:	e04a      	b.n	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	4a2c      	ldr	r2, [pc, #176]	; (80021a8 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80020f6:	fba2 2303 	umull	r2, r3, r2, r3
 80020fa:	085b      	lsrs	r3, r3, #1
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020fe:	e042      	b.n	8002186 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002100:	4b26      	ldr	r3, [pc, #152]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800210c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002110:	d108      	bne.n	8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800211c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
 8002122:	e01f      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d109      	bne.n	8002144 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 800213c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002140:	62bb      	str	r3, [r7, #40]	; 0x28
 8002142:	e00f      	b.n	8002164 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800214a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800214e:	d11c      	bne.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 800215c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002160:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002162:	e012      	b.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8002164:	e011      	b.n	800218a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002166:	f7ff fe75 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 800216a:	4602      	mov	r2, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0b9b      	lsrs	r3, r3, #14
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fbb2 f3f3 	udiv	r3, r2, r3
 800217e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002180:	e004      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800218a:	bf00      	nop
    }
  }
  return (frequency);
 800218c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800218e:	4618      	mov	r0, r3
 8002190:	3734      	adds	r7, #52	; 0x34
 8002192:	46bd      	mov	sp, r7
 8002194:	bd90      	pop	{r4, r7, pc}
 8002196:	bf00      	nop
 8002198:	0800426c 	.word	0x0800426c
 800219c:	40021000 	.word	0x40021000
 80021a0:	007a1200 	.word	0x007a1200
 80021a4:	003d0900 	.word	0x003d0900
 80021a8:	aaaaaaab 	.word	0xaaaaaaab

080021ac <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e084      	b.n	80022cc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	7c5b      	ldrb	r3, [r3, #17]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d105      	bne.n	80021d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2200      	movs	r2, #0
 80021d0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fd72 	bl	8000cbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2202      	movs	r2, #2
 80021dc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 faf4 	bl	80027cc <HAL_RTC_WaitForSynchro>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2204      	movs	r2, #4
 80021ee:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e06b      	b.n	80022cc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fbad 	bl	8002954 <RTC_EnterInitMode>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d004      	beq.n	800220a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2204      	movs	r2, #4
 8002204:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e060      	b.n	80022cc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0207 	bic.w	r2, r2, #7
 8002218:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002222:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a2b      	ldr	r2, [pc, #172]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002228:	f023 0301 	bic.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RTC_Init+0x128>)
 8002230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002232:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	4926      	ldr	r1, [pc, #152]	; (80022d4 <HAL_RTC_Init+0x128>)
 800223c:	4313      	orrs	r3, r2
 800223e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d003      	beq.n	8002252 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00e      	b.n	8002270 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002252:	2001      	movs	r0, #1
 8002254:	f7ff fee6 	bl	8002024 <HAL_RCCEx_GetPeriphCLKFreq>
 8002258:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2204      	movs	r2, #4
 8002264:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e030      	b.n	80022cc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 010f 	bic.w	r1, r3, #15
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c1a      	lsrs	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	b291      	uxth	r1, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	430b      	orrs	r3, r1
 800229a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 fb81 	bl	80029a4 <RTC_ExitInitMode>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2204      	movs	r2, #4
 80022ac:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00c      	b.n	80022cc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
  }
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40006c00 	.word	0x40006c00

080022d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	2300      	movs	r3, #0
 80022ea:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d002      	beq.n	80022f8 <HAL_RTC_SetTime+0x20>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e080      	b.n	80023fe <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	7c1b      	ldrb	r3, [r3, #16]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RTC_SetTime+0x30>
 8002304:	2302      	movs	r3, #2
 8002306:	e07a      	b.n	80023fe <HAL_RTC_SetTime+0x126>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2201      	movs	r2, #1
 800230c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2202      	movs	r2, #2
 8002312:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d113      	bne.n	8002342 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002324:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	785b      	ldrb	r3, [r3, #1]
 800232c:	4619      	mov	r1, r3
 800232e:	460b      	mov	r3, r1
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a5b      	subs	r3, r3, r1
 8002334:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002336:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800233c:	4413      	add	r3, r2
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	e01e      	b.n	8002380 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fb71 	bl	8002a2e <RTC_Bcd2ToByte>
 800234c:	4603      	mov	r3, r0
 800234e:	461a      	mov	r2, r3
 8002350:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002354:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	785b      	ldrb	r3, [r3, #1]
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fb66 	bl	8002a2e <RTC_Bcd2ToByte>
 8002362:	4603      	mov	r3, r0
 8002364:	461a      	mov	r2, r3
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800236e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	789b      	ldrb	r3, [r3, #2]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fb5a 	bl	8002a2e <RTC_Bcd2ToByte>
 800237a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800237c:	4423      	add	r3, r4
 800237e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002380:	6979      	ldr	r1, [r7, #20]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa7f 	bl	8002886 <RTC_WriteTimeCounter>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2204      	movs	r2, #4
 8002392:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e02f      	b.n	80023fe <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0205 	bic.w	r2, r2, #5
 80023ac:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fa90 	bl	80028d4 <RTC_ReadAlarmCounter>
 80023b4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023bc:	d018      	beq.n	80023f0 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d214      	bcs.n	80023f0 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80023cc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80023d0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80023d2:	6939      	ldr	r1, [r7, #16]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 fa96 	bl	8002906 <RTC_WriteAlarmCounter>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d007      	beq.n	80023f0 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2204      	movs	r2, #4
 80023e4:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e006      	b.n	80023fe <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2201      	movs	r2, #1
 80023f4:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	bd90      	pop	{r4, r7, pc}
	...

08002408 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b088      	sub	sp, #32
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002414:	2300      	movs	r3, #0
 8002416:	61bb      	str	r3, [r7, #24]
 8002418:	2300      	movs	r3, #0
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_RTC_GetTime+0x28>
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b5      	b.n	80025a0 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e0ac      	b.n	80025a0 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 f9ed 	bl	8002826 <RTC_ReadTimeCounter>
 800244c:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4a55      	ldr	r2, [pc, #340]	; (80025a8 <HAL_RTC_GetTime+0x1a0>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0adb      	lsrs	r3, r3, #11
 8002458:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4b52      	ldr	r3, [pc, #328]	; (80025a8 <HAL_RTC_GetTime+0x1a0>)
 800245e:	fba3 1302 	umull	r1, r3, r3, r2
 8002462:	0adb      	lsrs	r3, r3, #11
 8002464:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_RTC_GetTime+0x1a4>)
 8002470:	fba2 2303 	umull	r2, r3, r2, r3
 8002474:	095b      	lsrs	r3, r3, #5
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	4a4a      	ldr	r2, [pc, #296]	; (80025a8 <HAL_RTC_GetTime+0x1a0>)
 8002480:	fba2 1203 	umull	r1, r2, r2, r3
 8002484:	0ad2      	lsrs	r2, r2, #11
 8002486:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800248a:	fb01 f202 	mul.w	r2, r1, r2
 800248e:	1a9a      	subs	r2, r3, r2
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RTC_GetTime+0x1a4>)
 8002492:	fba3 1302 	umull	r1, r3, r3, r2
 8002496:	0959      	lsrs	r1, r3, #5
 8002498:	460b      	mov	r3, r1
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a5b      	subs	r3, r3, r1
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	1ad1      	subs	r1, r2, r3
 80024a2:	b2ca      	uxtb	r2, r1
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2b17      	cmp	r3, #23
 80024ac:	d955      	bls.n	800255a <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <HAL_RTC_GetTime+0x1a8>)
 80024b2:	fba2 2303 	umull	r2, r3, r2, r3
 80024b6:	091b      	lsrs	r3, r3, #4
 80024b8:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80024ba:	6939      	ldr	r1, [r7, #16]
 80024bc:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <HAL_RTC_GetTime+0x1a8>)
 80024be:	fba3 2301 	umull	r2, r3, r3, r1
 80024c2:	091a      	lsrs	r2, r3, #4
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	1aca      	subs	r2, r1, r3
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 f9fd 	bl	80028d4 <RTC_ReadAlarmCounter>
 80024da:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e2:	d008      	beq.n	80024f6 <HAL_RTC_GetTime+0xee>
 80024e4:	69fa      	ldr	r2, [r7, #28]
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d904      	bls.n	80024f6 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	61fb      	str	r3, [r7, #28]
 80024f4:	e002      	b.n	80024fc <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80024f6:	f04f 33ff 	mov.w	r3, #4294967295
 80024fa:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4a2d      	ldr	r2, [pc, #180]	; (80025b4 <HAL_RTC_GetTime+0x1ac>)
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800250a:	69b9      	ldr	r1, [r7, #24]
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f000 f9ba 	bl	8002886 <RTC_WriteTimeCounter>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e041      	b.n	80025a0 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002522:	d00c      	beq.n	800253e <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4413      	add	r3, r2
 800252a:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800252c:	69f9      	ldr	r1, [r7, #28]
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 f9e9 	bl	8002906 <RTC_WriteAlarmCounter>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e030      	b.n	80025a0 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800253e:	69f9      	ldr	r1, [r7, #28]
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f9e0 	bl	8002906 <RTC_WriteAlarmCounter>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e027      	b.n	80025a0 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002550:	6979      	ldr	r1, [r7, #20]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fa88 	bl	8002a68 <RTC_DateUpdate>
 8002558:	e003      	b.n	8002562 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01a      	beq.n	800259e <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fa41 	bl	80029f4 <RTC_ByteToBcd2>
 8002572:	4603      	mov	r3, r0
 8002574:	461a      	mov	r2, r3
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	785b      	ldrb	r3, [r3, #1]
 800257e:	4618      	mov	r0, r3
 8002580:	f000 fa38 	bl	80029f4 <RTC_ByteToBcd2>
 8002584:	4603      	mov	r3, r0
 8002586:	461a      	mov	r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	789b      	ldrb	r3, [r3, #2]
 8002590:	4618      	mov	r0, r3
 8002592:	f000 fa2f 	bl	80029f4 <RTC_ByteToBcd2>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	91a2b3c5 	.word	0x91a2b3c5
 80025ac:	88888889 	.word	0x88888889
 80025b0:	aaaaaaab 	.word	0xaaaaaaab
 80025b4:	00015180 	.word	0x00015180

080025b8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	2300      	movs	r3, #0
 80025ce:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_RTC_SetDate+0x24>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e097      	b.n	8002710 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	7c1b      	ldrb	r3, [r3, #16]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_RTC_SetDate+0x34>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e091      	b.n	8002710 <HAL_RTC_SetDate+0x158>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2202      	movs	r2, #2
 80025f6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	78da      	ldrb	r2, [r3, #3]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785a      	ldrb	r2, [r3, #1]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	789a      	ldrb	r2, [r3, #2]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	739a      	strb	r2, [r3, #14]
 8002616:	e01a      	b.n	800264e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	78db      	ldrb	r3, [r3, #3]
 800261c:	4618      	mov	r0, r3
 800261e:	f000 fa06 	bl	8002a2e <RTC_Bcd2ToByte>
 8002622:	4603      	mov	r3, r0
 8002624:	461a      	mov	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	785b      	ldrb	r3, [r3, #1]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 f9fd 	bl	8002a2e <RTC_Bcd2ToByte>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	4618      	mov	r0, r3
 8002642:	f000 f9f4 	bl	8002a2e <RTC_Bcd2ToByte>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	7bdb      	ldrb	r3, [r3, #15]
 8002652:	4618      	mov	r0, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	7b59      	ldrb	r1, [r3, #13]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	7b9b      	ldrb	r3, [r3, #14]
 800265c:	461a      	mov	r2, r3
 800265e:	f000 fadf 	bl	8002c20 <RTC_WeekDayNum>
 8002662:	4603      	mov	r3, r0
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	7b1a      	ldrb	r2, [r3, #12]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f8d7 	bl	8002826 <RTC_ReadTimeCounter>
 8002678:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RTC_SetDate+0x160>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0adb      	lsrs	r3, r3, #11
 8002684:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b18      	cmp	r3, #24
 800268a:	d93a      	bls.n	8002702 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <HAL_RTC_SetDate+0x164>)
 8002690:	fba2 2303 	umull	r2, r3, r2, r3
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <HAL_RTC_SetDate+0x168>)
 8002698:	fb02 f303 	mul.w	r3, r2, r3
 800269c:	69fa      	ldr	r2, [r7, #28]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80026a2:	69f9      	ldr	r1, [r7, #28]
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f8ee 	bl	8002886 <RTC_WriteTimeCounter>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2204      	movs	r2, #4
 80026b4:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e027      	b.n	8002710 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 f907 	bl	80028d4 <RTC_ReadAlarmCounter>
 80026c6:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d018      	beq.n	8002702 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d214      	bcs.n	8002702 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80026de:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80026e2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80026e4:	69b9      	ldr	r1, [r7, #24]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f90d 	bl	8002906 <RTC_WriteAlarmCounter>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d007      	beq.n	8002702 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2204      	movs	r2, #4
 80026f6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e006      	b.n	8002710 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2201      	movs	r2, #1
 8002706:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2200      	movs	r2, #0
 800270c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	3720      	adds	r7, #32
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	91a2b3c5 	.word	0x91a2b3c5
 800271c:	aaaaaaab 	.word	0xaaaaaaab
 8002720:	00015180 	.word	0x00015180

08002724 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2100      	movs	r1, #0
 8002736:	460a      	mov	r2, r1
 8002738:	801a      	strh	r2, [r3, #0]
 800273a:	460a      	mov	r2, r1
 800273c:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_RTC_GetDate+0x26>
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e03a      	b.n	80027c4 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800274e:	f107 0314 	add.w	r3, r7, #20
 8002752:	2200      	movs	r2, #0
 8002754:	4619      	mov	r1, r3
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe56 	bl	8002408 <HAL_RTC_GetTime>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02e      	b.n	80027c4 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	7b1a      	ldrb	r2, [r3, #12]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	7bda      	ldrb	r2, [r3, #15]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	7b5a      	ldrb	r2, [r3, #13]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	7b9a      	ldrb	r2, [r3, #14]
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01a      	beq.n	80027c2 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	78db      	ldrb	r3, [r3, #3]
 8002790:	4618      	mov	r0, r3
 8002792:	f000 f92f 	bl	80029f4 <RTC_ByteToBcd2>
 8002796:	4603      	mov	r3, r0
 8002798:	461a      	mov	r2, r3
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	785b      	ldrb	r3, [r3, #1]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f000 f926 	bl	80029f4 <RTC_ByteToBcd2>
 80027a8:	4603      	mov	r3, r0
 80027aa:	461a      	mov	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	789b      	ldrb	r3, [r3, #2]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f91d 	bl	80029f4 <RTC_ByteToBcd2>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e01d      	b.n	800281e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80027f2:	f7fe fc63 	bl	80010bc <HAL_GetTick>
 80027f6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80027f8:	e009      	b.n	800280e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80027fa:	f7fe fc5f 	bl	80010bc <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002808:	d901      	bls.n	800280e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e007      	b.n	800281e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0308 	and.w	r3, r3, #8
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0ee      	beq.n	80027fa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002826:	b480      	push	{r7}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800282e:	2300      	movs	r3, #0
 8002830:	827b      	strh	r3, [r7, #18]
 8002832:	2300      	movs	r3, #0
 8002834:	823b      	strh	r3, [r7, #16]
 8002836:	2300      	movs	r3, #0
 8002838:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002856:	8a7a      	ldrh	r2, [r7, #18]
 8002858:	8a3b      	ldrh	r3, [r7, #16]
 800285a:	429a      	cmp	r2, r3
 800285c:	d008      	beq.n	8002870 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800285e:	8a3b      	ldrh	r3, [r7, #16]
 8002860:	041a      	lsls	r2, r3, #16
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	b29b      	uxth	r3, r3
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
 800286e:	e004      	b.n	800287a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002870:	8a7b      	ldrh	r3, [r7, #18]
 8002872:	041a      	lsls	r2, r3, #16
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	4313      	orrs	r3, r2
 8002878:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800287a:	697b      	ldr	r3, [r7, #20]
}
 800287c:	4618      	mov	r0, r3
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002890:	2300      	movs	r3, #0
 8002892:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f85d 	bl	8002954 <RTC_EnterInitMode>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d002      	beq.n	80028a6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	e011      	b.n	80028ca <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	0c12      	lsrs	r2, r2, #16
 80028ae:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	b292      	uxth	r2, r2
 80028b8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f000 f872 	bl	80029a4 <RTC_ExitInitMode>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80028ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	81fb      	strh	r3, [r7, #14]
 80028e0:	2300      	movs	r3, #0
 80028e2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	041a      	lsls	r2, r3, #16
 80028f8:	89bb      	ldrh	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b084      	sub	sp, #16
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f81d 	bl	8002954 <RTC_EnterInitMode>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e011      	b.n	800294a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	683a      	ldr	r2, [r7, #0]
 800292c:	0c12      	lsrs	r2, r2, #16
 800292e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b292      	uxth	r2, r2
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f832 	bl	80029a4 <RTC_ExitInitMode>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800294a:	7bfb      	ldrb	r3, [r7, #15]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002960:	f7fe fbac 	bl	80010bc <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002966:	e009      	b.n	800297c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002968:	f7fe fba8 	bl	80010bc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002976:	d901      	bls.n	800297c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e00f      	b.n	800299c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0ee      	beq.n	8002968 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f042 0210 	orr.w	r2, r2, #16
 8002998:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 0210 	bic.w	r2, r2, #16
 80029be:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80029c0:	f7fe fb7c 	bl	80010bc <HAL_GetTick>
 80029c4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029c6:	e009      	b.n	80029dc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029c8:	f7fe fb78 	bl	80010bc <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d6:	d901      	bls.n	80029dc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e007      	b.n	80029ec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0320 	and.w	r3, r3, #32
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ee      	beq.n	80029c8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8002a02:	e005      	b.n	8002a10 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	3301      	adds	r3, #1
 8002a08:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	3b0a      	subs	r3, #10
 8002a0e:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	2b09      	cmp	r3, #9
 8002a14:	d8f6      	bhi.n	8002a04 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	79fb      	ldrb	r3, [r7, #7]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	b2db      	uxtb	r3, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b085      	sub	sp, #20
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	4603      	mov	r3, r0
 8002a36:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	461a      	mov	r2, r3
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	b2db      	uxtb	r3, r3
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	2300      	movs	r3, #0
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	7bdb      	ldrb	r3, [r3, #15]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7b5b      	ldrb	r3, [r3, #13]
 8002a8c:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	7b9b      	ldrb	r3, [r3, #14]
 8002a92:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002a94:	2300      	movs	r3, #0
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e06f      	b.n	8002b7a <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d011      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d00e      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b05      	cmp	r3, #5
 8002aaa:	d00b      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	2b07      	cmp	r3, #7
 8002ab0:	d008      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d005      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	2b0a      	cmp	r3, #10
 8002abc:	d002      	beq.n	8002ac4 <RTC_DateUpdate+0x5c>
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	2b0c      	cmp	r3, #12
 8002ac2:	d117      	bne.n	8002af4 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b1e      	cmp	r3, #30
 8002ac8:	d803      	bhi.n	8002ad2 <RTC_DateUpdate+0x6a>
      {
        day++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3301      	adds	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002ad0:	e050      	b.n	8002b74 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	d005      	beq.n	8002ae4 <RTC_DateUpdate+0x7c>
        {
          month++;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	3301      	adds	r3, #1
 8002adc:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002ae2:	e047      	b.n	8002b74 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	60fb      	str	r3, [r7, #12]
          year++;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8002af2:	e03f      	b.n	8002b74 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d008      	beq.n	8002b0c <RTC_DateUpdate+0xa4>
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d005      	beq.n	8002b0c <RTC_DateUpdate+0xa4>
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	d002      	beq.n	8002b0c <RTC_DateUpdate+0xa4>
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b0b      	cmp	r3, #11
 8002b0a:	d10c      	bne.n	8002b26 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2b1d      	cmp	r3, #29
 8002b10:	d803      	bhi.n	8002b1a <RTC_DateUpdate+0xb2>
      {
        day++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b18:	e02c      	b.n	8002b74 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b20:	2301      	movs	r3, #1
 8002b22:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002b24:	e026      	b.n	8002b74 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b1b      	cmp	r3, #27
 8002b30:	d803      	bhi.n	8002b3a <RTC_DateUpdate+0xd2>
      {
        day++;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	3301      	adds	r3, #1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	e01c      	b.n	8002b74 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b1c      	cmp	r3, #28
 8002b3e:	d111      	bne.n	8002b64 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f839 	bl	8002bbc <RTC_IsLeapYear>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d003      	beq.n	8002b58 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	3301      	adds	r3, #1
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	e00d      	b.n	8002b74 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e007      	b.n	8002b74 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2b1d      	cmp	r3, #29
 8002b68:	d104      	bne.n	8002b74 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002b70:	2301      	movs	r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d38b      	bcc.n	8002a9a <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	6978      	ldr	r0, [r7, #20]
 8002ba6:	f000 f83b 	bl	8002c20 <RTC_WeekDayNum>
 8002baa:	4603      	mov	r3, r0
 8002bac:	461a      	mov	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	731a      	strb	r2, [r3, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
	...

08002bbc <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002bc6:	88fb      	ldrh	r3, [r7, #6]
 8002bc8:	f003 0303 	and.w	r3, r3, #3
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e01d      	b.n	8002c12 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	4a10      	ldr	r2, [pc, #64]	; (8002c1c <RTC_IsLeapYear+0x60>)
 8002bda:	fba2 1203 	umull	r1, r2, r2, r3
 8002bde:	0952      	lsrs	r2, r2, #5
 8002be0:	2164      	movs	r1, #100	; 0x64
 8002be2:	fb01 f202 	mul.w	r2, r1, r2
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00f      	b.n	8002c12 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <RTC_IsLeapYear+0x60>)
 8002bf6:	fba2 1203 	umull	r1, r2, r2, r3
 8002bfa:	09d2      	lsrs	r2, r2, #7
 8002bfc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002c00:	fb01 f202 	mul.w	r2, r1, r2
 8002c04:	1a9b      	subs	r3, r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002c10:	2300      	movs	r3, #0
  }
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr
 8002c1c:	51eb851f 	.word	0x51eb851f

08002c20 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002c3e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002c40:	78fb      	ldrb	r3, [r7, #3]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d82d      	bhi.n	8002ca2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	4a2c      	ldr	r2, [pc, #176]	; (8002d04 <RTC_WeekDayNum+0xe4>)
 8002c54:	fba2 2303 	umull	r2, r3, r2, r3
 8002c58:	085a      	lsrs	r2, r3, #1
 8002c5a:	78bb      	ldrb	r3, [r7, #2]
 8002c5c:	441a      	add	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	441a      	add	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3b01      	subs	r3, #1
 8002c66:	089b      	lsrs	r3, r3, #2
 8002c68:	441a      	add	r2, r3
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4926      	ldr	r1, [pc, #152]	; (8002d08 <RTC_WeekDayNum+0xe8>)
 8002c70:	fba1 1303 	umull	r1, r3, r1, r3
 8002c74:	095b      	lsrs	r3, r3, #5
 8002c76:	1ad2      	subs	r2, r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	4922      	ldr	r1, [pc, #136]	; (8002d08 <RTC_WeekDayNum+0xe8>)
 8002c7e:	fba1 1303 	umull	r1, r3, r1, r3
 8002c82:	09db      	lsrs	r3, r3, #7
 8002c84:	4413      	add	r3, r2
 8002c86:	1d1a      	adds	r2, r3, #4
 8002c88:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <RTC_WeekDayNum+0xec>)
 8002c8a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8e:	1ad1      	subs	r1, r2, r3
 8002c90:	0849      	lsrs	r1, r1, #1
 8002c92:	440b      	add	r3, r1
 8002c94:	0899      	lsrs	r1, r3, #2
 8002c96:	460b      	mov	r3, r1
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	1a5b      	subs	r3, r3, r1
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e029      	b.n	8002cf6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <RTC_WeekDayNum+0xe4>)
 8002cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb4:	085a      	lsrs	r2, r3, #1
 8002cb6:	78bb      	ldrb	r3, [r7, #2]
 8002cb8:	441a      	add	r2, r3
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	441a      	add	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	441a      	add	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	4910      	ldr	r1, [pc, #64]	; (8002d08 <RTC_WeekDayNum+0xe8>)
 8002cc8:	fba1 1303 	umull	r1, r3, r1, r3
 8002ccc:	095b      	lsrs	r3, r3, #5
 8002cce:	1ad2      	subs	r2, r2, r3
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	490d      	ldr	r1, [pc, #52]	; (8002d08 <RTC_WeekDayNum+0xe8>)
 8002cd4:	fba1 1303 	umull	r1, r3, r1, r3
 8002cd8:	09db      	lsrs	r3, r3, #7
 8002cda:	4413      	add	r3, r2
 8002cdc:	1c9a      	adds	r2, r3, #2
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <RTC_WeekDayNum+0xec>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	1ad1      	subs	r1, r2, r3
 8002ce6:	0849      	lsrs	r1, r1, #1
 8002ce8:	440b      	add	r3, r1
 8002cea:	0899      	lsrs	r1, r3, #2
 8002cec:	460b      	mov	r3, r1
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	1a5b      	subs	r3, r3, r1
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	b2db      	uxtb	r3, r3
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	38e38e39 	.word	0x38e38e39
 8002d08:	51eb851f 	.word	0x51eb851f
 8002d0c:	24924925 	.word	0x24924925

08002d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e041      	b.n	8002da6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f7fd ffe4 	bl	8000d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4610      	mov	r0, r2
 8002d50:	f000 fa70 	bl	8003234 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e03a      	b.n	8002e3e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_TIM_Base_Start_IT+0x98>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d009      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <HAL_TIM_Base_Start_IT+0x9c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d004      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x58>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d111      	bne.n	8002e2c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d010      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e2a:	e007      	b.n	8002e3c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bc80      	pop	{r7}
 8002e46:	4770      	bx	lr
 8002e48:	40012c00 	.word	0x40012c00
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800

08002e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d122      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d11b      	bne.n	8002eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f06f 0202 	mvn.w	r2, #2
 8002e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b1 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9a4 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 f9b3 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691b      	ldr	r3, [r3, #16]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d122      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d11b      	bne.n	8002f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0204 	mvn.w	r2, #4
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f987 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f97a 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f989 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d122      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11b      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f06f 0208 	mvn.w	r2, #8
 8002f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2204      	movs	r2, #4
 8002f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f003 0303 	and.w	r3, r3, #3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f95d 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f44:	e005      	b.n	8002f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f950 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f95f 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b10      	cmp	r3, #16
 8002f64:	d122      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d11b      	bne.n	8002fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f933 	bl	80031fe <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f926 	bl	80031ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f935 	bl	8003210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d10e      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d107      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0201 	mvn.w	r2, #1
 8002fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7fd f8c2 	bl	800015c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d10e      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d107      	bne.n	8003004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 fa77 	bl	80034f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d107      	bne.n	8003030 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8f9 	bl	8003222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b20      	cmp	r3, #32
 800303c:	d10e      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b20      	cmp	r3, #32
 800304a:	d107      	bne.n	800305c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0220 	mvn.w	r2, #32
 8003054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa42 	bl	80034e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800305c:	bf00      	nop
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_TIM_ConfigClockSource+0x18>
 8003078:	2302      	movs	r3, #2
 800307a:	e0b3      	b.n	80031e4 <HAL_TIM_ConfigClockSource+0x180>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800309a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b4:	d03e      	beq.n	8003134 <HAL_TIM_ConfigClockSource+0xd0>
 80030b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ba:	f200 8087 	bhi.w	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030c2:	f000 8085 	beq.w	80031d0 <HAL_TIM_ConfigClockSource+0x16c>
 80030c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ca:	d87f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030cc:	2b70      	cmp	r3, #112	; 0x70
 80030ce:	d01a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0xa2>
 80030d0:	2b70      	cmp	r3, #112	; 0x70
 80030d2:	d87b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030d4:	2b60      	cmp	r3, #96	; 0x60
 80030d6:	d050      	beq.n	800317a <HAL_TIM_ConfigClockSource+0x116>
 80030d8:	2b60      	cmp	r3, #96	; 0x60
 80030da:	d877      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030dc:	2b50      	cmp	r3, #80	; 0x50
 80030de:	d03c      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xf6>
 80030e0:	2b50      	cmp	r3, #80	; 0x50
 80030e2:	d873      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030e4:	2b40      	cmp	r3, #64	; 0x40
 80030e6:	d058      	beq.n	800319a <HAL_TIM_ConfigClockSource+0x136>
 80030e8:	2b40      	cmp	r3, #64	; 0x40
 80030ea:	d86f      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030ec:	2b30      	cmp	r3, #48	; 0x30
 80030ee:	d064      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 80030f0:	2b30      	cmp	r3, #48	; 0x30
 80030f2:	d86b      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d060      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 80030f8:	2b20      	cmp	r3, #32
 80030fa:	d867      	bhi.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05c      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
 8003100:	2b10      	cmp	r3, #16
 8003102:	d05a      	beq.n	80031ba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003104:	e062      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	6899      	ldr	r1, [r3, #8]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	f000 f966 	bl	80033e6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003128:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	609a      	str	r2, [r3, #8]
      break;
 8003132:	e04e      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6818      	ldr	r0, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f000 f94f 	bl	80033e6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003156:	609a      	str	r2, [r3, #8]
      break;
 8003158:	e03b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	461a      	mov	r2, r3
 8003168:	f000 f8c6 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2150      	movs	r1, #80	; 0x50
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f91d 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 8003178:	e02b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	461a      	mov	r2, r3
 8003188:	f000 f8e4 	bl	8003354 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2160      	movs	r1, #96	; 0x60
 8003192:	4618      	mov	r0, r3
 8003194:	f000 f90d 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 8003198:	e01b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6818      	ldr	r0, [r3, #0]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	461a      	mov	r2, r3
 80031a8:	f000 f8a6 	bl	80032f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2140      	movs	r1, #64	; 0x40
 80031b2:	4618      	mov	r0, r3
 80031b4:	f000 f8fd 	bl	80033b2 <TIM_ITRx_SetConfig>
      break;
 80031b8:	e00b      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	4610      	mov	r0, r2
 80031c6:	f000 f8f4 	bl	80033b2 <TIM_ITRx_SetConfig>
        break;
 80031ca:	e002      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031cc:	bf00      	nop
 80031ce:	e000      	b.n	80031d2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80031d0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003206:	bf00      	nop
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr

08003234 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00b      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003252:	d007      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_Base_SetConfig+0x30>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a25      	ldr	r2, [pc, #148]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d00b      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003284:	d007      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <TIM_Base_SetConfig+0xbc>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d003      	beq.n	8003296 <TIM_Base_SetConfig+0x62>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a18      	ldr	r2, [pc, #96]	; (80032f4 <TIM_Base_SetConfig+0xc0>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d108      	bne.n	80032a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800329c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a07      	ldr	r2, [pc, #28]	; (80032ec <TIM_Base_SetConfig+0xb8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d103      	bne.n	80032dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	615a      	str	r2, [r3, #20]
}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40000400 	.word	0x40000400
 80032f4:	40000800 	.word	0x40000800

080032f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	011b      	lsls	r3, r3, #4
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f023 030a 	bic.w	r3, r3, #10
 8003334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	4313      	orrs	r3, r2
 800333c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	621a      	str	r2, [r3, #32]
}
 800334a:	bf00      	nop
 800334c:	371c      	adds	r7, #28
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 0210 	bic.w	r2, r3, #16
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	031b      	lsls	r3, r3, #12
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003390:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	621a      	str	r2, [r3, #32]
}
 80033a8:	bf00      	nop
 80033aa:	371c      	adds	r7, #28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bc80      	pop	{r7}
 80033b0:	4770      	bx	lr

080033b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f043 0307 	orr.w	r3, r3, #7
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	609a      	str	r2, [r3, #8]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bc80      	pop	{r7}
 80033e4:	4770      	bx	lr

080033e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b087      	sub	sp, #28
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003400:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	021a      	lsls	r2, r3, #8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	431a      	orrs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4313      	orrs	r3, r2
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	609a      	str	r2, [r3, #8]
}
 800341a:	bf00      	nop
 800341c:	371c      	adds	r7, #28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr

08003424 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003438:	2302      	movs	r3, #2
 800343a:	e046      	b.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d00e      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003488:	d009      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a12      	ldr	r2, [pc, #72]	; (80034d8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d004      	beq.n	800349e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d10c      	bne.n	80034b8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3714      	adds	r7, #20
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr
 80034d4:	40012c00 	.word	0x40012c00
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800

080034e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034fa:	bf00      	nop
 80034fc:	370c      	adds	r7, #12
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e03f      	b.n	8003596 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fd fc10 	bl	8000d50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	; 0x24
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f905 	bl	8003758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af02      	add	r7, sp, #8
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d17c      	bne.n	80036b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_UART_Transmit+0x2c>
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e075      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d101      	bne.n	80035dc <HAL_UART_Transmit+0x3e>
 80035d8:	2302      	movs	r3, #2
 80035da:	e06e      	b.n	80036ba <HAL_UART_Transmit+0x11c>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2221      	movs	r2, #33	; 0x21
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035f2:	f7fd fd63 	bl	80010bc <HAL_GetTick>
 80035f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	88fa      	ldrh	r2, [r7, #6]
 80035fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	88fa      	ldrh	r2, [r7, #6]
 8003602:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360c:	d108      	bne.n	8003620 <HAL_UART_Transmit+0x82>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d104      	bne.n	8003620 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	61bb      	str	r3, [r7, #24]
 800361e:	e003      	b.n	8003628 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003624:	2300      	movs	r3, #0
 8003626:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003630:	e02a      	b.n	8003688 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 f840 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e036      	b.n	80036ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10b      	bne.n	800366a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	881b      	ldrh	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003660:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3302      	adds	r3, #2
 8003666:	61bb      	str	r3, [r7, #24]
 8003668:	e007      	b.n	800367a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800368c:	b29b      	uxth	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1cf      	bne.n	8003632 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2200      	movs	r2, #0
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f810 	bl	80036c2 <UART_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e006      	b.n	80036ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e000      	b.n	80036ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80036b8:	2302      	movs	r3, #2
  }
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3720      	adds	r7, #32
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	4613      	mov	r3, r2
 80036d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d2:	e02c      	b.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d028      	beq.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d007      	beq.n	80036f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e2:	f7fd fceb 	bl	80010bc <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d21d      	bcs.n	800372e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003700:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e00f      	b.n	800374e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	68ba      	ldr	r2, [r7, #8]
 800373a:	429a      	cmp	r2, r3
 800373c:	bf0c      	ite	eq
 800373e:	2301      	moveq	r3, #1
 8003740:	2300      	movne	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	429a      	cmp	r2, r3
 800374a:	d0c3      	beq.n	80036d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003792:	f023 030c 	bic.w	r3, r3, #12
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	68b9      	ldr	r1, [r7, #8]
 800379c:	430b      	orrs	r3, r1
 800379e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a2c      	ldr	r2, [pc, #176]	; (800386c <UART_SetConfig+0x114>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d103      	bne.n	80037c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7fe fb48 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	e002      	b.n	80037ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7fe fb30 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a22      	ldr	r2, [pc, #136]	; (8003870 <UART_SetConfig+0x118>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	0119      	lsls	r1, r3, #4
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <UART_SetConfig+0x118>)
 8003806:	fba3 0302 	umull	r0, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a15      	ldr	r2, [pc, #84]	; (8003870 <UART_SetConfig+0x118>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	4419      	add	r1, r3
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <UART_SetConfig+0x118>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a07      	ldr	r2, [pc, #28]	; (8003870 <UART_SetConfig+0x118>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	440a      	add	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40013800 	.word	0x40013800
 8003870:	51eb851f 	.word	0x51eb851f

08003874 <__errno>:
 8003874:	4b01      	ldr	r3, [pc, #4]	; (800387c <__errno+0x8>)
 8003876:	6818      	ldr	r0, [r3, #0]
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	2000000c 	.word	0x2000000c

08003880 <__libc_init_array>:
 8003880:	b570      	push	{r4, r5, r6, lr}
 8003882:	2600      	movs	r6, #0
 8003884:	4d0c      	ldr	r5, [pc, #48]	; (80038b8 <__libc_init_array+0x38>)
 8003886:	4c0d      	ldr	r4, [pc, #52]	; (80038bc <__libc_init_array+0x3c>)
 8003888:	1b64      	subs	r4, r4, r5
 800388a:	10a4      	asrs	r4, r4, #2
 800388c:	42a6      	cmp	r6, r4
 800388e:	d109      	bne.n	80038a4 <__libc_init_array+0x24>
 8003890:	f000 fc70 	bl	8004174 <_init>
 8003894:	2600      	movs	r6, #0
 8003896:	4d0a      	ldr	r5, [pc, #40]	; (80038c0 <__libc_init_array+0x40>)
 8003898:	4c0a      	ldr	r4, [pc, #40]	; (80038c4 <__libc_init_array+0x44>)
 800389a:	1b64      	subs	r4, r4, r5
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	42a6      	cmp	r6, r4
 80038a0:	d105      	bne.n	80038ae <__libc_init_array+0x2e>
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038a8:	4798      	blx	r3
 80038aa:	3601      	adds	r6, #1
 80038ac:	e7ee      	b.n	800388c <__libc_init_array+0xc>
 80038ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80038b2:	4798      	blx	r3
 80038b4:	3601      	adds	r6, #1
 80038b6:	e7f2      	b.n	800389e <__libc_init_array+0x1e>
 80038b8:	080042c8 	.word	0x080042c8
 80038bc:	080042c8 	.word	0x080042c8
 80038c0:	080042c8 	.word	0x080042c8
 80038c4:	080042cc 	.word	0x080042cc

080038c8 <memset>:
 80038c8:	4603      	mov	r3, r0
 80038ca:	4402      	add	r2, r0
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d100      	bne.n	80038d2 <memset+0xa>
 80038d0:	4770      	bx	lr
 80038d2:	f803 1b01 	strb.w	r1, [r3], #1
 80038d6:	e7f9      	b.n	80038cc <memset+0x4>

080038d8 <sniprintf>:
 80038d8:	b40c      	push	{r2, r3}
 80038da:	b530      	push	{r4, r5, lr}
 80038dc:	4b17      	ldr	r3, [pc, #92]	; (800393c <sniprintf+0x64>)
 80038de:	1e0c      	subs	r4, r1, #0
 80038e0:	681d      	ldr	r5, [r3, #0]
 80038e2:	b09d      	sub	sp, #116	; 0x74
 80038e4:	da08      	bge.n	80038f8 <sniprintf+0x20>
 80038e6:	238b      	movs	r3, #139	; 0x8b
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	602b      	str	r3, [r5, #0]
 80038ee:	b01d      	add	sp, #116	; 0x74
 80038f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80038f4:	b002      	add	sp, #8
 80038f6:	4770      	bx	lr
 80038f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80038fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003900:	bf0c      	ite	eq
 8003902:	4623      	moveq	r3, r4
 8003904:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003908:	9304      	str	r3, [sp, #16]
 800390a:	9307      	str	r3, [sp, #28]
 800390c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003910:	9002      	str	r0, [sp, #8]
 8003912:	9006      	str	r0, [sp, #24]
 8003914:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003918:	4628      	mov	r0, r5
 800391a:	ab21      	add	r3, sp, #132	; 0x84
 800391c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800391e:	a902      	add	r1, sp, #8
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	f000 f869 	bl	80039f8 <_svfiprintf_r>
 8003926:	1c43      	adds	r3, r0, #1
 8003928:	bfbc      	itt	lt
 800392a:	238b      	movlt	r3, #139	; 0x8b
 800392c:	602b      	strlt	r3, [r5, #0]
 800392e:	2c00      	cmp	r4, #0
 8003930:	d0dd      	beq.n	80038ee <sniprintf+0x16>
 8003932:	2200      	movs	r2, #0
 8003934:	9b02      	ldr	r3, [sp, #8]
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e7d9      	b.n	80038ee <sniprintf+0x16>
 800393a:	bf00      	nop
 800393c:	2000000c 	.word	0x2000000c

08003940 <__ssputs_r>:
 8003940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003944:	688e      	ldr	r6, [r1, #8]
 8003946:	4682      	mov	sl, r0
 8003948:	429e      	cmp	r6, r3
 800394a:	460c      	mov	r4, r1
 800394c:	4690      	mov	r8, r2
 800394e:	461f      	mov	r7, r3
 8003950:	d838      	bhi.n	80039c4 <__ssputs_r+0x84>
 8003952:	898a      	ldrh	r2, [r1, #12]
 8003954:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003958:	d032      	beq.n	80039c0 <__ssputs_r+0x80>
 800395a:	6825      	ldr	r5, [r4, #0]
 800395c:	6909      	ldr	r1, [r1, #16]
 800395e:	3301      	adds	r3, #1
 8003960:	eba5 0901 	sub.w	r9, r5, r1
 8003964:	6965      	ldr	r5, [r4, #20]
 8003966:	444b      	add	r3, r9
 8003968:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800396c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003970:	106d      	asrs	r5, r5, #1
 8003972:	429d      	cmp	r5, r3
 8003974:	bf38      	it	cc
 8003976:	461d      	movcc	r5, r3
 8003978:	0553      	lsls	r3, r2, #21
 800397a:	d531      	bpl.n	80039e0 <__ssputs_r+0xa0>
 800397c:	4629      	mov	r1, r5
 800397e:	f000 fb53 	bl	8004028 <_malloc_r>
 8003982:	4606      	mov	r6, r0
 8003984:	b950      	cbnz	r0, 800399c <__ssputs_r+0x5c>
 8003986:	230c      	movs	r3, #12
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	f8ca 3000 	str.w	r3, [sl]
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	81a3      	strh	r3, [r4, #12]
 8003998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800399c:	464a      	mov	r2, r9
 800399e:	6921      	ldr	r1, [r4, #16]
 80039a0:	f000 face 	bl	8003f40 <memcpy>
 80039a4:	89a3      	ldrh	r3, [r4, #12]
 80039a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80039aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ae:	81a3      	strh	r3, [r4, #12]
 80039b0:	6126      	str	r6, [r4, #16]
 80039b2:	444e      	add	r6, r9
 80039b4:	6026      	str	r6, [r4, #0]
 80039b6:	463e      	mov	r6, r7
 80039b8:	6165      	str	r5, [r4, #20]
 80039ba:	eba5 0509 	sub.w	r5, r5, r9
 80039be:	60a5      	str	r5, [r4, #8]
 80039c0:	42be      	cmp	r6, r7
 80039c2:	d900      	bls.n	80039c6 <__ssputs_r+0x86>
 80039c4:	463e      	mov	r6, r7
 80039c6:	4632      	mov	r2, r6
 80039c8:	4641      	mov	r1, r8
 80039ca:	6820      	ldr	r0, [r4, #0]
 80039cc:	f000 fac6 	bl	8003f5c <memmove>
 80039d0:	68a3      	ldr	r3, [r4, #8]
 80039d2:	6822      	ldr	r2, [r4, #0]
 80039d4:	1b9b      	subs	r3, r3, r6
 80039d6:	4432      	add	r2, r6
 80039d8:	2000      	movs	r0, #0
 80039da:	60a3      	str	r3, [r4, #8]
 80039dc:	6022      	str	r2, [r4, #0]
 80039de:	e7db      	b.n	8003998 <__ssputs_r+0x58>
 80039e0:	462a      	mov	r2, r5
 80039e2:	f000 fb7b 	bl	80040dc <_realloc_r>
 80039e6:	4606      	mov	r6, r0
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d1e1      	bne.n	80039b0 <__ssputs_r+0x70>
 80039ec:	4650      	mov	r0, sl
 80039ee:	6921      	ldr	r1, [r4, #16]
 80039f0:	f000 face 	bl	8003f90 <_free_r>
 80039f4:	e7c7      	b.n	8003986 <__ssputs_r+0x46>
	...

080039f8 <_svfiprintf_r>:
 80039f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039fc:	4698      	mov	r8, r3
 80039fe:	898b      	ldrh	r3, [r1, #12]
 8003a00:	4607      	mov	r7, r0
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	460d      	mov	r5, r1
 8003a06:	4614      	mov	r4, r2
 8003a08:	b09d      	sub	sp, #116	; 0x74
 8003a0a:	d50e      	bpl.n	8003a2a <_svfiprintf_r+0x32>
 8003a0c:	690b      	ldr	r3, [r1, #16]
 8003a0e:	b963      	cbnz	r3, 8003a2a <_svfiprintf_r+0x32>
 8003a10:	2140      	movs	r1, #64	; 0x40
 8003a12:	f000 fb09 	bl	8004028 <_malloc_r>
 8003a16:	6028      	str	r0, [r5, #0]
 8003a18:	6128      	str	r0, [r5, #16]
 8003a1a:	b920      	cbnz	r0, 8003a26 <_svfiprintf_r+0x2e>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e0d1      	b.n	8003bca <_svfiprintf_r+0x1d2>
 8003a26:	2340      	movs	r3, #64	; 0x40
 8003a28:	616b      	str	r3, [r5, #20]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a2e:	2320      	movs	r3, #32
 8003a30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003a34:	2330      	movs	r3, #48	; 0x30
 8003a36:	f04f 0901 	mov.w	r9, #1
 8003a3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a3e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003be4 <_svfiprintf_r+0x1ec>
 8003a42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a46:	4623      	mov	r3, r4
 8003a48:	469a      	mov	sl, r3
 8003a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a4e:	b10a      	cbz	r2, 8003a54 <_svfiprintf_r+0x5c>
 8003a50:	2a25      	cmp	r2, #37	; 0x25
 8003a52:	d1f9      	bne.n	8003a48 <_svfiprintf_r+0x50>
 8003a54:	ebba 0b04 	subs.w	fp, sl, r4
 8003a58:	d00b      	beq.n	8003a72 <_svfiprintf_r+0x7a>
 8003a5a:	465b      	mov	r3, fp
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	4629      	mov	r1, r5
 8003a60:	4638      	mov	r0, r7
 8003a62:	f7ff ff6d 	bl	8003940 <__ssputs_r>
 8003a66:	3001      	adds	r0, #1
 8003a68:	f000 80aa 	beq.w	8003bc0 <_svfiprintf_r+0x1c8>
 8003a6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a6e:	445a      	add	r2, fp
 8003a70:	9209      	str	r2, [sp, #36]	; 0x24
 8003a72:	f89a 3000 	ldrb.w	r3, [sl]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80a2 	beq.w	8003bc0 <_svfiprintf_r+0x1c8>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a86:	f10a 0a01 	add.w	sl, sl, #1
 8003a8a:	9304      	str	r3, [sp, #16]
 8003a8c:	9307      	str	r3, [sp, #28]
 8003a8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a92:	931a      	str	r3, [sp, #104]	; 0x68
 8003a94:	4654      	mov	r4, sl
 8003a96:	2205      	movs	r2, #5
 8003a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9c:	4851      	ldr	r0, [pc, #324]	; (8003be4 <_svfiprintf_r+0x1ec>)
 8003a9e:	f000 fa41 	bl	8003f24 <memchr>
 8003aa2:	9a04      	ldr	r2, [sp, #16]
 8003aa4:	b9d8      	cbnz	r0, 8003ade <_svfiprintf_r+0xe6>
 8003aa6:	06d0      	lsls	r0, r2, #27
 8003aa8:	bf44      	itt	mi
 8003aaa:	2320      	movmi	r3, #32
 8003aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ab0:	0711      	lsls	r1, r2, #28
 8003ab2:	bf44      	itt	mi
 8003ab4:	232b      	movmi	r3, #43	; 0x2b
 8003ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003aba:	f89a 3000 	ldrb.w	r3, [sl]
 8003abe:	2b2a      	cmp	r3, #42	; 0x2a
 8003ac0:	d015      	beq.n	8003aee <_svfiprintf_r+0xf6>
 8003ac2:	4654      	mov	r4, sl
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f04f 0c0a 	mov.w	ip, #10
 8003aca:	9a07      	ldr	r2, [sp, #28]
 8003acc:	4621      	mov	r1, r4
 8003ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ad2:	3b30      	subs	r3, #48	; 0x30
 8003ad4:	2b09      	cmp	r3, #9
 8003ad6:	d94e      	bls.n	8003b76 <_svfiprintf_r+0x17e>
 8003ad8:	b1b0      	cbz	r0, 8003b08 <_svfiprintf_r+0x110>
 8003ada:	9207      	str	r2, [sp, #28]
 8003adc:	e014      	b.n	8003b08 <_svfiprintf_r+0x110>
 8003ade:	eba0 0308 	sub.w	r3, r0, r8
 8003ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	9304      	str	r3, [sp, #16]
 8003aec:	e7d2      	b.n	8003a94 <_svfiprintf_r+0x9c>
 8003aee:	9b03      	ldr	r3, [sp, #12]
 8003af0:	1d19      	adds	r1, r3, #4
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	9103      	str	r1, [sp, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bfbb      	ittet	lt
 8003afa:	425b      	neglt	r3, r3
 8003afc:	f042 0202 	orrlt.w	r2, r2, #2
 8003b00:	9307      	strge	r3, [sp, #28]
 8003b02:	9307      	strlt	r3, [sp, #28]
 8003b04:	bfb8      	it	lt
 8003b06:	9204      	strlt	r2, [sp, #16]
 8003b08:	7823      	ldrb	r3, [r4, #0]
 8003b0a:	2b2e      	cmp	r3, #46	; 0x2e
 8003b0c:	d10c      	bne.n	8003b28 <_svfiprintf_r+0x130>
 8003b0e:	7863      	ldrb	r3, [r4, #1]
 8003b10:	2b2a      	cmp	r3, #42	; 0x2a
 8003b12:	d135      	bne.n	8003b80 <_svfiprintf_r+0x188>
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	3402      	adds	r4, #2
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	9203      	str	r2, [sp, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	bfb8      	it	lt
 8003b22:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b26:	9305      	str	r3, [sp, #20]
 8003b28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003bf4 <_svfiprintf_r+0x1fc>
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	4650      	mov	r0, sl
 8003b30:	7821      	ldrb	r1, [r4, #0]
 8003b32:	f000 f9f7 	bl	8003f24 <memchr>
 8003b36:	b140      	cbz	r0, 8003b4a <_svfiprintf_r+0x152>
 8003b38:	2340      	movs	r3, #64	; 0x40
 8003b3a:	eba0 000a 	sub.w	r0, r0, sl
 8003b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8003b42:	9b04      	ldr	r3, [sp, #16]
 8003b44:	3401      	adds	r4, #1
 8003b46:	4303      	orrs	r3, r0
 8003b48:	9304      	str	r3, [sp, #16]
 8003b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b4e:	2206      	movs	r2, #6
 8003b50:	4825      	ldr	r0, [pc, #148]	; (8003be8 <_svfiprintf_r+0x1f0>)
 8003b52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b56:	f000 f9e5 	bl	8003f24 <memchr>
 8003b5a:	2800      	cmp	r0, #0
 8003b5c:	d038      	beq.n	8003bd0 <_svfiprintf_r+0x1d8>
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <_svfiprintf_r+0x1f4>)
 8003b60:	bb1b      	cbnz	r3, 8003baa <_svfiprintf_r+0x1b2>
 8003b62:	9b03      	ldr	r3, [sp, #12]
 8003b64:	3307      	adds	r3, #7
 8003b66:	f023 0307 	bic.w	r3, r3, #7
 8003b6a:	3308      	adds	r3, #8
 8003b6c:	9303      	str	r3, [sp, #12]
 8003b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b70:	4433      	add	r3, r6
 8003b72:	9309      	str	r3, [sp, #36]	; 0x24
 8003b74:	e767      	b.n	8003a46 <_svfiprintf_r+0x4e>
 8003b76:	460c      	mov	r4, r1
 8003b78:	2001      	movs	r0, #1
 8003b7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b7e:	e7a5      	b.n	8003acc <_svfiprintf_r+0xd4>
 8003b80:	2300      	movs	r3, #0
 8003b82:	f04f 0c0a 	mov.w	ip, #10
 8003b86:	4619      	mov	r1, r3
 8003b88:	3401      	adds	r4, #1
 8003b8a:	9305      	str	r3, [sp, #20]
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b92:	3a30      	subs	r2, #48	; 0x30
 8003b94:	2a09      	cmp	r2, #9
 8003b96:	d903      	bls.n	8003ba0 <_svfiprintf_r+0x1a8>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0c5      	beq.n	8003b28 <_svfiprintf_r+0x130>
 8003b9c:	9105      	str	r1, [sp, #20]
 8003b9e:	e7c3      	b.n	8003b28 <_svfiprintf_r+0x130>
 8003ba0:	4604      	mov	r4, r0
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ba8:	e7f0      	b.n	8003b8c <_svfiprintf_r+0x194>
 8003baa:	ab03      	add	r3, sp, #12
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	462a      	mov	r2, r5
 8003bb0:	4638      	mov	r0, r7
 8003bb2:	4b0f      	ldr	r3, [pc, #60]	; (8003bf0 <_svfiprintf_r+0x1f8>)
 8003bb4:	a904      	add	r1, sp, #16
 8003bb6:	f3af 8000 	nop.w
 8003bba:	1c42      	adds	r2, r0, #1
 8003bbc:	4606      	mov	r6, r0
 8003bbe:	d1d6      	bne.n	8003b6e <_svfiprintf_r+0x176>
 8003bc0:	89ab      	ldrh	r3, [r5, #12]
 8003bc2:	065b      	lsls	r3, r3, #25
 8003bc4:	f53f af2c 	bmi.w	8003a20 <_svfiprintf_r+0x28>
 8003bc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bca:	b01d      	add	sp, #116	; 0x74
 8003bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bd0:	ab03      	add	r3, sp, #12
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	462a      	mov	r2, r5
 8003bd6:	4638      	mov	r0, r7
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <_svfiprintf_r+0x1f8>)
 8003bda:	a904      	add	r1, sp, #16
 8003bdc:	f000 f87c 	bl	8003cd8 <_printf_i>
 8003be0:	e7eb      	b.n	8003bba <_svfiprintf_r+0x1c2>
 8003be2:	bf00      	nop
 8003be4:	08004294 	.word	0x08004294
 8003be8:	0800429e 	.word	0x0800429e
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	08003941 	.word	0x08003941
 8003bf4:	0800429a 	.word	0x0800429a

08003bf8 <_printf_common>:
 8003bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bfc:	4616      	mov	r6, r2
 8003bfe:	4699      	mov	r9, r3
 8003c00:	688a      	ldr	r2, [r1, #8]
 8003c02:	690b      	ldr	r3, [r1, #16]
 8003c04:	4607      	mov	r7, r0
 8003c06:	4293      	cmp	r3, r2
 8003c08:	bfb8      	it	lt
 8003c0a:	4613      	movlt	r3, r2
 8003c0c:	6033      	str	r3, [r6, #0]
 8003c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c12:	460c      	mov	r4, r1
 8003c14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c18:	b10a      	cbz	r2, 8003c1e <_printf_common+0x26>
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	6033      	str	r3, [r6, #0]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0699      	lsls	r1, r3, #26
 8003c22:	bf42      	ittt	mi
 8003c24:	6833      	ldrmi	r3, [r6, #0]
 8003c26:	3302      	addmi	r3, #2
 8003c28:	6033      	strmi	r3, [r6, #0]
 8003c2a:	6825      	ldr	r5, [r4, #0]
 8003c2c:	f015 0506 	ands.w	r5, r5, #6
 8003c30:	d106      	bne.n	8003c40 <_printf_common+0x48>
 8003c32:	f104 0a19 	add.w	sl, r4, #25
 8003c36:	68e3      	ldr	r3, [r4, #12]
 8003c38:	6832      	ldr	r2, [r6, #0]
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	42ab      	cmp	r3, r5
 8003c3e:	dc28      	bgt.n	8003c92 <_printf_common+0x9a>
 8003c40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c44:	1e13      	subs	r3, r2, #0
 8003c46:	6822      	ldr	r2, [r4, #0]
 8003c48:	bf18      	it	ne
 8003c4a:	2301      	movne	r3, #1
 8003c4c:	0692      	lsls	r2, r2, #26
 8003c4e:	d42d      	bmi.n	8003cac <_printf_common+0xb4>
 8003c50:	4649      	mov	r1, r9
 8003c52:	4638      	mov	r0, r7
 8003c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c58:	47c0      	blx	r8
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d020      	beq.n	8003ca0 <_printf_common+0xa8>
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	68e5      	ldr	r5, [r4, #12]
 8003c62:	f003 0306 	and.w	r3, r3, #6
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	bf18      	it	ne
 8003c6a:	2500      	movne	r5, #0
 8003c6c:	6832      	ldr	r2, [r6, #0]
 8003c6e:	f04f 0600 	mov.w	r6, #0
 8003c72:	68a3      	ldr	r3, [r4, #8]
 8003c74:	bf08      	it	eq
 8003c76:	1aad      	subeq	r5, r5, r2
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	bf08      	it	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	4293      	cmp	r3, r2
 8003c82:	bfc4      	itt	gt
 8003c84:	1a9b      	subgt	r3, r3, r2
 8003c86:	18ed      	addgt	r5, r5, r3
 8003c88:	341a      	adds	r4, #26
 8003c8a:	42b5      	cmp	r5, r6
 8003c8c:	d11a      	bne.n	8003cc4 <_printf_common+0xcc>
 8003c8e:	2000      	movs	r0, #0
 8003c90:	e008      	b.n	8003ca4 <_printf_common+0xac>
 8003c92:	2301      	movs	r3, #1
 8003c94:	4652      	mov	r2, sl
 8003c96:	4649      	mov	r1, r9
 8003c98:	4638      	mov	r0, r7
 8003c9a:	47c0      	blx	r8
 8003c9c:	3001      	adds	r0, #1
 8003c9e:	d103      	bne.n	8003ca8 <_printf_common+0xb0>
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca8:	3501      	adds	r5, #1
 8003caa:	e7c4      	b.n	8003c36 <_printf_common+0x3e>
 8003cac:	2030      	movs	r0, #48	; 0x30
 8003cae:	18e1      	adds	r1, r4, r3
 8003cb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cba:	4422      	add	r2, r4
 8003cbc:	3302      	adds	r3, #2
 8003cbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc2:	e7c5      	b.n	8003c50 <_printf_common+0x58>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4649      	mov	r1, r9
 8003cca:	4638      	mov	r0, r7
 8003ccc:	47c0      	blx	r8
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d0e6      	beq.n	8003ca0 <_printf_common+0xa8>
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7d9      	b.n	8003c8a <_printf_common+0x92>
	...

08003cd8 <_printf_i>:
 8003cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cdc:	460c      	mov	r4, r1
 8003cde:	7e27      	ldrb	r7, [r4, #24]
 8003ce0:	4691      	mov	r9, r2
 8003ce2:	2f78      	cmp	r7, #120	; 0x78
 8003ce4:	4680      	mov	r8, r0
 8003ce6:	469a      	mov	sl, r3
 8003ce8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003cea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cee:	d807      	bhi.n	8003d00 <_printf_i+0x28>
 8003cf0:	2f62      	cmp	r7, #98	; 0x62
 8003cf2:	d80a      	bhi.n	8003d0a <_printf_i+0x32>
 8003cf4:	2f00      	cmp	r7, #0
 8003cf6:	f000 80d9 	beq.w	8003eac <_printf_i+0x1d4>
 8003cfa:	2f58      	cmp	r7, #88	; 0x58
 8003cfc:	f000 80a4 	beq.w	8003e48 <_printf_i+0x170>
 8003d00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d08:	e03a      	b.n	8003d80 <_printf_i+0xa8>
 8003d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d0e:	2b15      	cmp	r3, #21
 8003d10:	d8f6      	bhi.n	8003d00 <_printf_i+0x28>
 8003d12:	a001      	add	r0, pc, #4	; (adr r0, 8003d18 <_printf_i+0x40>)
 8003d14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003d18:	08003d71 	.word	0x08003d71
 8003d1c:	08003d85 	.word	0x08003d85
 8003d20:	08003d01 	.word	0x08003d01
 8003d24:	08003d01 	.word	0x08003d01
 8003d28:	08003d01 	.word	0x08003d01
 8003d2c:	08003d01 	.word	0x08003d01
 8003d30:	08003d85 	.word	0x08003d85
 8003d34:	08003d01 	.word	0x08003d01
 8003d38:	08003d01 	.word	0x08003d01
 8003d3c:	08003d01 	.word	0x08003d01
 8003d40:	08003d01 	.word	0x08003d01
 8003d44:	08003e93 	.word	0x08003e93
 8003d48:	08003db5 	.word	0x08003db5
 8003d4c:	08003e75 	.word	0x08003e75
 8003d50:	08003d01 	.word	0x08003d01
 8003d54:	08003d01 	.word	0x08003d01
 8003d58:	08003eb5 	.word	0x08003eb5
 8003d5c:	08003d01 	.word	0x08003d01
 8003d60:	08003db5 	.word	0x08003db5
 8003d64:	08003d01 	.word	0x08003d01
 8003d68:	08003d01 	.word	0x08003d01
 8003d6c:	08003e7d 	.word	0x08003e7d
 8003d70:	680b      	ldr	r3, [r1, #0]
 8003d72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003d76:	1d1a      	adds	r2, r3, #4
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	600a      	str	r2, [r1, #0]
 8003d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d80:	2301      	movs	r3, #1
 8003d82:	e0a4      	b.n	8003ece <_printf_i+0x1f6>
 8003d84:	6825      	ldr	r5, [r4, #0]
 8003d86:	6808      	ldr	r0, [r1, #0]
 8003d88:	062e      	lsls	r6, r5, #24
 8003d8a:	f100 0304 	add.w	r3, r0, #4
 8003d8e:	d50a      	bpl.n	8003da6 <_printf_i+0xce>
 8003d90:	6805      	ldr	r5, [r0, #0]
 8003d92:	600b      	str	r3, [r1, #0]
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	da03      	bge.n	8003da0 <_printf_i+0xc8>
 8003d98:	232d      	movs	r3, #45	; 0x2d
 8003d9a:	426d      	negs	r5, r5
 8003d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da0:	230a      	movs	r3, #10
 8003da2:	485e      	ldr	r0, [pc, #376]	; (8003f1c <_printf_i+0x244>)
 8003da4:	e019      	b.n	8003dda <_printf_i+0x102>
 8003da6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003daa:	6805      	ldr	r5, [r0, #0]
 8003dac:	600b      	str	r3, [r1, #0]
 8003dae:	bf18      	it	ne
 8003db0:	b22d      	sxthne	r5, r5
 8003db2:	e7ef      	b.n	8003d94 <_printf_i+0xbc>
 8003db4:	680b      	ldr	r3, [r1, #0]
 8003db6:	6825      	ldr	r5, [r4, #0]
 8003db8:	1d18      	adds	r0, r3, #4
 8003dba:	6008      	str	r0, [r1, #0]
 8003dbc:	0628      	lsls	r0, r5, #24
 8003dbe:	d501      	bpl.n	8003dc4 <_printf_i+0xec>
 8003dc0:	681d      	ldr	r5, [r3, #0]
 8003dc2:	e002      	b.n	8003dca <_printf_i+0xf2>
 8003dc4:	0669      	lsls	r1, r5, #25
 8003dc6:	d5fb      	bpl.n	8003dc0 <_printf_i+0xe8>
 8003dc8:	881d      	ldrh	r5, [r3, #0]
 8003dca:	2f6f      	cmp	r7, #111	; 0x6f
 8003dcc:	bf0c      	ite	eq
 8003dce:	2308      	moveq	r3, #8
 8003dd0:	230a      	movne	r3, #10
 8003dd2:	4852      	ldr	r0, [pc, #328]	; (8003f1c <_printf_i+0x244>)
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dda:	6866      	ldr	r6, [r4, #4]
 8003ddc:	2e00      	cmp	r6, #0
 8003dde:	bfa8      	it	ge
 8003de0:	6821      	ldrge	r1, [r4, #0]
 8003de2:	60a6      	str	r6, [r4, #8]
 8003de4:	bfa4      	itt	ge
 8003de6:	f021 0104 	bicge.w	r1, r1, #4
 8003dea:	6021      	strge	r1, [r4, #0]
 8003dec:	b90d      	cbnz	r5, 8003df2 <_printf_i+0x11a>
 8003dee:	2e00      	cmp	r6, #0
 8003df0:	d04d      	beq.n	8003e8e <_printf_i+0x1b6>
 8003df2:	4616      	mov	r6, r2
 8003df4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003df8:	fb03 5711 	mls	r7, r3, r1, r5
 8003dfc:	5dc7      	ldrb	r7, [r0, r7]
 8003dfe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e02:	462f      	mov	r7, r5
 8003e04:	42bb      	cmp	r3, r7
 8003e06:	460d      	mov	r5, r1
 8003e08:	d9f4      	bls.n	8003df4 <_printf_i+0x11c>
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d10b      	bne.n	8003e26 <_printf_i+0x14e>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	07df      	lsls	r7, r3, #31
 8003e12:	d508      	bpl.n	8003e26 <_printf_i+0x14e>
 8003e14:	6923      	ldr	r3, [r4, #16]
 8003e16:	6861      	ldr	r1, [r4, #4]
 8003e18:	4299      	cmp	r1, r3
 8003e1a:	bfde      	ittt	le
 8003e1c:	2330      	movle	r3, #48	; 0x30
 8003e1e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e22:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e26:	1b92      	subs	r2, r2, r6
 8003e28:	6122      	str	r2, [r4, #16]
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	4621      	mov	r1, r4
 8003e2e:	4640      	mov	r0, r8
 8003e30:	f8cd a000 	str.w	sl, [sp]
 8003e34:	aa03      	add	r2, sp, #12
 8003e36:	f7ff fedf 	bl	8003bf8 <_printf_common>
 8003e3a:	3001      	adds	r0, #1
 8003e3c:	d14c      	bne.n	8003ed8 <_printf_i+0x200>
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	b004      	add	sp, #16
 8003e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e48:	4834      	ldr	r0, [pc, #208]	; (8003f1c <_printf_i+0x244>)
 8003e4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e4e:	680e      	ldr	r6, [r1, #0]
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	f856 5b04 	ldr.w	r5, [r6], #4
 8003e56:	061f      	lsls	r7, r3, #24
 8003e58:	600e      	str	r6, [r1, #0]
 8003e5a:	d514      	bpl.n	8003e86 <_printf_i+0x1ae>
 8003e5c:	07d9      	lsls	r1, r3, #31
 8003e5e:	bf44      	itt	mi
 8003e60:	f043 0320 	orrmi.w	r3, r3, #32
 8003e64:	6023      	strmi	r3, [r4, #0]
 8003e66:	b91d      	cbnz	r5, 8003e70 <_printf_i+0x198>
 8003e68:	6823      	ldr	r3, [r4, #0]
 8003e6a:	f023 0320 	bic.w	r3, r3, #32
 8003e6e:	6023      	str	r3, [r4, #0]
 8003e70:	2310      	movs	r3, #16
 8003e72:	e7af      	b.n	8003dd4 <_printf_i+0xfc>
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	f043 0320 	orr.w	r3, r3, #32
 8003e7a:	6023      	str	r3, [r4, #0]
 8003e7c:	2378      	movs	r3, #120	; 0x78
 8003e7e:	4828      	ldr	r0, [pc, #160]	; (8003f20 <_printf_i+0x248>)
 8003e80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e84:	e7e3      	b.n	8003e4e <_printf_i+0x176>
 8003e86:	065e      	lsls	r6, r3, #25
 8003e88:	bf48      	it	mi
 8003e8a:	b2ad      	uxthmi	r5, r5
 8003e8c:	e7e6      	b.n	8003e5c <_printf_i+0x184>
 8003e8e:	4616      	mov	r6, r2
 8003e90:	e7bb      	b.n	8003e0a <_printf_i+0x132>
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	6826      	ldr	r6, [r4, #0]
 8003e96:	1d1d      	adds	r5, r3, #4
 8003e98:	6960      	ldr	r0, [r4, #20]
 8003e9a:	600d      	str	r5, [r1, #0]
 8003e9c:	0635      	lsls	r5, r6, #24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	d501      	bpl.n	8003ea6 <_printf_i+0x1ce>
 8003ea2:	6018      	str	r0, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <_printf_i+0x1d4>
 8003ea6:	0671      	lsls	r1, r6, #25
 8003ea8:	d5fb      	bpl.n	8003ea2 <_printf_i+0x1ca>
 8003eaa:	8018      	strh	r0, [r3, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	4616      	mov	r6, r2
 8003eb0:	6123      	str	r3, [r4, #16]
 8003eb2:	e7ba      	b.n	8003e2a <_printf_i+0x152>
 8003eb4:	680b      	ldr	r3, [r1, #0]
 8003eb6:	1d1a      	adds	r2, r3, #4
 8003eb8:	600a      	str	r2, [r1, #0]
 8003eba:	681e      	ldr	r6, [r3, #0]
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	6862      	ldr	r2, [r4, #4]
 8003ec2:	f000 f82f 	bl	8003f24 <memchr>
 8003ec6:	b108      	cbz	r0, 8003ecc <_printf_i+0x1f4>
 8003ec8:	1b80      	subs	r0, r0, r6
 8003eca:	6060      	str	r0, [r4, #4]
 8003ecc:	6863      	ldr	r3, [r4, #4]
 8003ece:	6123      	str	r3, [r4, #16]
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ed6:	e7a8      	b.n	8003e2a <_printf_i+0x152>
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4649      	mov	r1, r9
 8003edc:	4640      	mov	r0, r8
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	47d0      	blx	sl
 8003ee2:	3001      	adds	r0, #1
 8003ee4:	d0ab      	beq.n	8003e3e <_printf_i+0x166>
 8003ee6:	6823      	ldr	r3, [r4, #0]
 8003ee8:	079b      	lsls	r3, r3, #30
 8003eea:	d413      	bmi.n	8003f14 <_printf_i+0x23c>
 8003eec:	68e0      	ldr	r0, [r4, #12]
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	4298      	cmp	r0, r3
 8003ef2:	bfb8      	it	lt
 8003ef4:	4618      	movlt	r0, r3
 8003ef6:	e7a4      	b.n	8003e42 <_printf_i+0x16a>
 8003ef8:	2301      	movs	r3, #1
 8003efa:	4632      	mov	r2, r6
 8003efc:	4649      	mov	r1, r9
 8003efe:	4640      	mov	r0, r8
 8003f00:	47d0      	blx	sl
 8003f02:	3001      	adds	r0, #1
 8003f04:	d09b      	beq.n	8003e3e <_printf_i+0x166>
 8003f06:	3501      	adds	r5, #1
 8003f08:	68e3      	ldr	r3, [r4, #12]
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	1a5b      	subs	r3, r3, r1
 8003f0e:	42ab      	cmp	r3, r5
 8003f10:	dcf2      	bgt.n	8003ef8 <_printf_i+0x220>
 8003f12:	e7eb      	b.n	8003eec <_printf_i+0x214>
 8003f14:	2500      	movs	r5, #0
 8003f16:	f104 0619 	add.w	r6, r4, #25
 8003f1a:	e7f5      	b.n	8003f08 <_printf_i+0x230>
 8003f1c:	080042a5 	.word	0x080042a5
 8003f20:	080042b6 	.word	0x080042b6

08003f24 <memchr>:
 8003f24:	4603      	mov	r3, r0
 8003f26:	b510      	push	{r4, lr}
 8003f28:	b2c9      	uxtb	r1, r1
 8003f2a:	4402      	add	r2, r0
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	d101      	bne.n	8003f36 <memchr+0x12>
 8003f32:	2000      	movs	r0, #0
 8003f34:	e003      	b.n	8003f3e <memchr+0x1a>
 8003f36:	7804      	ldrb	r4, [r0, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	428c      	cmp	r4, r1
 8003f3c:	d1f6      	bne.n	8003f2c <memchr+0x8>
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <memcpy>:
 8003f40:	440a      	add	r2, r1
 8003f42:	4291      	cmp	r1, r2
 8003f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f48:	d100      	bne.n	8003f4c <memcpy+0xc>
 8003f4a:	4770      	bx	lr
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f52:	4291      	cmp	r1, r2
 8003f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f58:	d1f9      	bne.n	8003f4e <memcpy+0xe>
 8003f5a:	bd10      	pop	{r4, pc}

08003f5c <memmove>:
 8003f5c:	4288      	cmp	r0, r1
 8003f5e:	b510      	push	{r4, lr}
 8003f60:	eb01 0402 	add.w	r4, r1, r2
 8003f64:	d902      	bls.n	8003f6c <memmove+0x10>
 8003f66:	4284      	cmp	r4, r0
 8003f68:	4623      	mov	r3, r4
 8003f6a:	d807      	bhi.n	8003f7c <memmove+0x20>
 8003f6c:	1e43      	subs	r3, r0, #1
 8003f6e:	42a1      	cmp	r1, r4
 8003f70:	d008      	beq.n	8003f84 <memmove+0x28>
 8003f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003f7a:	e7f8      	b.n	8003f6e <memmove+0x12>
 8003f7c:	4601      	mov	r1, r0
 8003f7e:	4402      	add	r2, r0
 8003f80:	428a      	cmp	r2, r1
 8003f82:	d100      	bne.n	8003f86 <memmove+0x2a>
 8003f84:	bd10      	pop	{r4, pc}
 8003f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003f8e:	e7f7      	b.n	8003f80 <memmove+0x24>

08003f90 <_free_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4605      	mov	r5, r0
 8003f94:	2900      	cmp	r1, #0
 8003f96:	d043      	beq.n	8004020 <_free_r+0x90>
 8003f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f9c:	1f0c      	subs	r4, r1, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	bfb8      	it	lt
 8003fa2:	18e4      	addlt	r4, r4, r3
 8003fa4:	f000 f8d0 	bl	8004148 <__malloc_lock>
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <_free_r+0x94>)
 8003faa:	6813      	ldr	r3, [r2, #0]
 8003fac:	4610      	mov	r0, r2
 8003fae:	b933      	cbnz	r3, 8003fbe <_free_r+0x2e>
 8003fb0:	6063      	str	r3, [r4, #4]
 8003fb2:	6014      	str	r4, [r2, #0]
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fba:	f000 b8cb 	b.w	8004154 <__malloc_unlock>
 8003fbe:	42a3      	cmp	r3, r4
 8003fc0:	d90a      	bls.n	8003fd8 <_free_r+0x48>
 8003fc2:	6821      	ldr	r1, [r4, #0]
 8003fc4:	1862      	adds	r2, r4, r1
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	bf01      	itttt	eq
 8003fca:	681a      	ldreq	r2, [r3, #0]
 8003fcc:	685b      	ldreq	r3, [r3, #4]
 8003fce:	1852      	addeq	r2, r2, r1
 8003fd0:	6022      	streq	r2, [r4, #0]
 8003fd2:	6063      	str	r3, [r4, #4]
 8003fd4:	6004      	str	r4, [r0, #0]
 8003fd6:	e7ed      	b.n	8003fb4 <_free_r+0x24>
 8003fd8:	461a      	mov	r2, r3
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	b10b      	cbz	r3, 8003fe2 <_free_r+0x52>
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	d9fa      	bls.n	8003fd8 <_free_r+0x48>
 8003fe2:	6811      	ldr	r1, [r2, #0]
 8003fe4:	1850      	adds	r0, r2, r1
 8003fe6:	42a0      	cmp	r0, r4
 8003fe8:	d10b      	bne.n	8004002 <_free_r+0x72>
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	4401      	add	r1, r0
 8003fee:	1850      	adds	r0, r2, r1
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	6011      	str	r1, [r2, #0]
 8003ff4:	d1de      	bne.n	8003fb4 <_free_r+0x24>
 8003ff6:	6818      	ldr	r0, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4401      	add	r1, r0
 8003ffc:	6011      	str	r1, [r2, #0]
 8003ffe:	6053      	str	r3, [r2, #4]
 8004000:	e7d8      	b.n	8003fb4 <_free_r+0x24>
 8004002:	d902      	bls.n	800400a <_free_r+0x7a>
 8004004:	230c      	movs	r3, #12
 8004006:	602b      	str	r3, [r5, #0]
 8004008:	e7d4      	b.n	8003fb4 <_free_r+0x24>
 800400a:	6820      	ldr	r0, [r4, #0]
 800400c:	1821      	adds	r1, r4, r0
 800400e:	428b      	cmp	r3, r1
 8004010:	bf01      	itttt	eq
 8004012:	6819      	ldreq	r1, [r3, #0]
 8004014:	685b      	ldreq	r3, [r3, #4]
 8004016:	1809      	addeq	r1, r1, r0
 8004018:	6021      	streq	r1, [r4, #0]
 800401a:	6063      	str	r3, [r4, #4]
 800401c:	6054      	str	r4, [r2, #4]
 800401e:	e7c9      	b.n	8003fb4 <_free_r+0x24>
 8004020:	bd38      	pop	{r3, r4, r5, pc}
 8004022:	bf00      	nop
 8004024:	2000015c 	.word	0x2000015c

08004028 <_malloc_r>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	1ccd      	adds	r5, r1, #3
 800402c:	f025 0503 	bic.w	r5, r5, #3
 8004030:	3508      	adds	r5, #8
 8004032:	2d0c      	cmp	r5, #12
 8004034:	bf38      	it	cc
 8004036:	250c      	movcc	r5, #12
 8004038:	2d00      	cmp	r5, #0
 800403a:	4606      	mov	r6, r0
 800403c:	db01      	blt.n	8004042 <_malloc_r+0x1a>
 800403e:	42a9      	cmp	r1, r5
 8004040:	d903      	bls.n	800404a <_malloc_r+0x22>
 8004042:	230c      	movs	r3, #12
 8004044:	6033      	str	r3, [r6, #0]
 8004046:	2000      	movs	r0, #0
 8004048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800404a:	f000 f87d 	bl	8004148 <__malloc_lock>
 800404e:	4921      	ldr	r1, [pc, #132]	; (80040d4 <_malloc_r+0xac>)
 8004050:	680a      	ldr	r2, [r1, #0]
 8004052:	4614      	mov	r4, r2
 8004054:	b99c      	cbnz	r4, 800407e <_malloc_r+0x56>
 8004056:	4f20      	ldr	r7, [pc, #128]	; (80040d8 <_malloc_r+0xb0>)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b923      	cbnz	r3, 8004066 <_malloc_r+0x3e>
 800405c:	4621      	mov	r1, r4
 800405e:	4630      	mov	r0, r6
 8004060:	f000 f862 	bl	8004128 <_sbrk_r>
 8004064:	6038      	str	r0, [r7, #0]
 8004066:	4629      	mov	r1, r5
 8004068:	4630      	mov	r0, r6
 800406a:	f000 f85d 	bl	8004128 <_sbrk_r>
 800406e:	1c43      	adds	r3, r0, #1
 8004070:	d123      	bne.n	80040ba <_malloc_r+0x92>
 8004072:	230c      	movs	r3, #12
 8004074:	4630      	mov	r0, r6
 8004076:	6033      	str	r3, [r6, #0]
 8004078:	f000 f86c 	bl	8004154 <__malloc_unlock>
 800407c:	e7e3      	b.n	8004046 <_malloc_r+0x1e>
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	1b5b      	subs	r3, r3, r5
 8004082:	d417      	bmi.n	80040b4 <_malloc_r+0x8c>
 8004084:	2b0b      	cmp	r3, #11
 8004086:	d903      	bls.n	8004090 <_malloc_r+0x68>
 8004088:	6023      	str	r3, [r4, #0]
 800408a:	441c      	add	r4, r3
 800408c:	6025      	str	r5, [r4, #0]
 800408e:	e004      	b.n	800409a <_malloc_r+0x72>
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	42a2      	cmp	r2, r4
 8004094:	bf0c      	ite	eq
 8004096:	600b      	streq	r3, [r1, #0]
 8004098:	6053      	strne	r3, [r2, #4]
 800409a:	4630      	mov	r0, r6
 800409c:	f000 f85a 	bl	8004154 <__malloc_unlock>
 80040a0:	f104 000b 	add.w	r0, r4, #11
 80040a4:	1d23      	adds	r3, r4, #4
 80040a6:	f020 0007 	bic.w	r0, r0, #7
 80040aa:	1ac2      	subs	r2, r0, r3
 80040ac:	d0cc      	beq.n	8004048 <_malloc_r+0x20>
 80040ae:	1a1b      	subs	r3, r3, r0
 80040b0:	50a3      	str	r3, [r4, r2]
 80040b2:	e7c9      	b.n	8004048 <_malloc_r+0x20>
 80040b4:	4622      	mov	r2, r4
 80040b6:	6864      	ldr	r4, [r4, #4]
 80040b8:	e7cc      	b.n	8004054 <_malloc_r+0x2c>
 80040ba:	1cc4      	adds	r4, r0, #3
 80040bc:	f024 0403 	bic.w	r4, r4, #3
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d0e3      	beq.n	800408c <_malloc_r+0x64>
 80040c4:	1a21      	subs	r1, r4, r0
 80040c6:	4630      	mov	r0, r6
 80040c8:	f000 f82e 	bl	8004128 <_sbrk_r>
 80040cc:	3001      	adds	r0, #1
 80040ce:	d1dd      	bne.n	800408c <_malloc_r+0x64>
 80040d0:	e7cf      	b.n	8004072 <_malloc_r+0x4a>
 80040d2:	bf00      	nop
 80040d4:	2000015c 	.word	0x2000015c
 80040d8:	20000160 	.word	0x20000160

080040dc <_realloc_r>:
 80040dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040de:	4607      	mov	r7, r0
 80040e0:	4614      	mov	r4, r2
 80040e2:	460e      	mov	r6, r1
 80040e4:	b921      	cbnz	r1, 80040f0 <_realloc_r+0x14>
 80040e6:	4611      	mov	r1, r2
 80040e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040ec:	f7ff bf9c 	b.w	8004028 <_malloc_r>
 80040f0:	b922      	cbnz	r2, 80040fc <_realloc_r+0x20>
 80040f2:	f7ff ff4d 	bl	8003f90 <_free_r>
 80040f6:	4625      	mov	r5, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040fc:	f000 f830 	bl	8004160 <_malloc_usable_size_r>
 8004100:	42a0      	cmp	r0, r4
 8004102:	d20f      	bcs.n	8004124 <_realloc_r+0x48>
 8004104:	4621      	mov	r1, r4
 8004106:	4638      	mov	r0, r7
 8004108:	f7ff ff8e 	bl	8004028 <_malloc_r>
 800410c:	4605      	mov	r5, r0
 800410e:	2800      	cmp	r0, #0
 8004110:	d0f2      	beq.n	80040f8 <_realloc_r+0x1c>
 8004112:	4631      	mov	r1, r6
 8004114:	4622      	mov	r2, r4
 8004116:	f7ff ff13 	bl	8003f40 <memcpy>
 800411a:	4631      	mov	r1, r6
 800411c:	4638      	mov	r0, r7
 800411e:	f7ff ff37 	bl	8003f90 <_free_r>
 8004122:	e7e9      	b.n	80040f8 <_realloc_r+0x1c>
 8004124:	4635      	mov	r5, r6
 8004126:	e7e7      	b.n	80040f8 <_realloc_r+0x1c>

08004128 <_sbrk_r>:
 8004128:	b538      	push	{r3, r4, r5, lr}
 800412a:	2300      	movs	r3, #0
 800412c:	4d05      	ldr	r5, [pc, #20]	; (8004144 <_sbrk_r+0x1c>)
 800412e:	4604      	mov	r4, r0
 8004130:	4608      	mov	r0, r1
 8004132:	602b      	str	r3, [r5, #0]
 8004134:	f7fc fec6 	bl	8000ec4 <_sbrk>
 8004138:	1c43      	adds	r3, r0, #1
 800413a:	d102      	bne.n	8004142 <_sbrk_r+0x1a>
 800413c:	682b      	ldr	r3, [r5, #0]
 800413e:	b103      	cbz	r3, 8004142 <_sbrk_r+0x1a>
 8004140:	6023      	str	r3, [r4, #0]
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	20000208 	.word	0x20000208

08004148 <__malloc_lock>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__malloc_lock+0x8>)
 800414a:	f000 b811 	b.w	8004170 <__retarget_lock_acquire_recursive>
 800414e:	bf00      	nop
 8004150:	20000210 	.word	0x20000210

08004154 <__malloc_unlock>:
 8004154:	4801      	ldr	r0, [pc, #4]	; (800415c <__malloc_unlock+0x8>)
 8004156:	f000 b80c 	b.w	8004172 <__retarget_lock_release_recursive>
 800415a:	bf00      	nop
 800415c:	20000210 	.word	0x20000210

08004160 <_malloc_usable_size_r>:
 8004160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004164:	1f18      	subs	r0, r3, #4
 8004166:	2b00      	cmp	r3, #0
 8004168:	bfbc      	itt	lt
 800416a:	580b      	ldrlt	r3, [r1, r0]
 800416c:	18c0      	addlt	r0, r0, r3
 800416e:	4770      	bx	lr

08004170 <__retarget_lock_acquire_recursive>:
 8004170:	4770      	bx	lr

08004172 <__retarget_lock_release_recursive>:
 8004172:	4770      	bx	lr

08004174 <_init>:
 8004174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004176:	bf00      	nop
 8004178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800417a:	bc08      	pop	{r3}
 800417c:	469e      	mov	lr, r3
 800417e:	4770      	bx	lr

08004180 <_fini>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr
